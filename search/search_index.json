{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>fr24 is a library for downloading data from Flightradar24 using gRPC and JSON.</p> <p>It supports querying live feed snapshots/playback, trajectory history and other miscellaneous metadata.</p>"},{"location":"#installation","title":"Installation","text":"<p>For the latest stable version, create a new virtual environment and run:</p> PipPoetry <pre><code>pip install fr24\n</code></pre> <pre><code>poetry add fr24\n</code></pre> <p>For a development version, clone the repository and install it:</p> PipPoetry <pre><code>git clone https://github.com/cathaypacific8747/fr24.git\ncd fr24\npip install .\n</code></pre> <pre><code>git clone https://github.com/cathaypacific8747/fr24.git\ncd fr24\npoetry install\npoetry shell\n</code></pre>"},{"location":"#license","title":"License","text":"<p>MIT</p> <p>Warning</p> <p>Code has been developed for educational purposes ONLY. Do not abuse it.</p> <pre><code>{\n  \"copyright\": \"Copyright (c) 2014-2023 Flightradar24 AB. All rights reserved.\",\n  \"legalNotice\": \"The contents of this file and all derived data are the property of Flightradar24 AB for use exclusively by its products and applications. Using, modifying or redistributing the data without the prior written permission of Flightradar24 AB is not allowed and may result in prosecutions.\"\n}\n</code></pre>"},{"location":"api/base/","title":"Base Classes","text":"<p>Mostly used in the core.</p>"},{"location":"api/base/#fr24.base","title":"base","text":""},{"location":"api/base/#fr24.base.Ctx","title":"Ctx  <code>module-attribute</code>","text":"<pre><code>Ctx = TypeVar('Ctx')\n</code></pre> <p>Type of the context for the service, a TypedDict</p>"},{"location":"api/base/#fr24.base.ApiRspRaw","title":"ApiRspRaw  <code>module-attribute</code>","text":"<pre><code>ApiRspRaw = TypeVar('ApiRspRaw')\n</code></pre> <p>Type returned by the API, usually a TypedDict, e.g. fr24.types.fr24.FlightList</p>"},{"location":"api/base/#fr24.base.HTTPClient","title":"HTTPClient","text":"<pre><code>HTTPClient(client: AsyncClient)\n</code></pre> <p>An HTTPX client for making requests to the API.</p>"},{"location":"api/base/#fr24.base.HTTPClient.client","title":"client  <code>instance-attribute</code>","text":"<pre><code>client = client\n</code></pre>"},{"location":"api/base/#fr24.base.HTTPClient.auth","title":"auth  <code>instance-attribute</code>","text":"<pre><code>auth: Authentication | None = None\n</code></pre>"},{"location":"api/base/#fr24.base.HTTPClient.__aenter__","title":"__aenter__  <code>async</code>","text":"<pre><code>__aenter__() -&gt; HTTPClient\n</code></pre>"},{"location":"api/base/#fr24.base.HTTPClient.__aexit__","title":"__aexit__  <code>async</code>","text":"<pre><code>__aexit__(*args: Any) -&gt; None\n</code></pre>"},{"location":"api/base/#fr24.base.APIResponse","title":"APIResponse","text":"<pre><code>APIResponse(ctx: Ctx, response: ApiRspRaw)\n</code></pre> <p>               Bases: <code>Generic[Ctx, ApiRspRaw]</code></p> <p>Wraps an API response with context.</p>"},{"location":"api/base/#fr24.base.APIResponse.ctx","title":"ctx  <code>instance-attribute</code>","text":"<pre><code>ctx = ctx\n</code></pre>"},{"location":"api/base/#fr24.base.APIResponse.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = response\n</code></pre>"},{"location":"api/base/#fr24.base.APIResponse.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre>"},{"location":"api/base/#fr24.base.ArrowTable","title":"ArrowTable","text":"<pre><code>ArrowTable(ctx: Ctx, table: Table)\n</code></pre> <p>               Bases: <code>Generic[Ctx]</code></p> <p>Manages storage and retrieval of an arrow table with context.</p>"},{"location":"api/base/#fr24.base.ArrowTable.ctx","title":"ctx  <code>instance-attribute</code>","text":"<pre><code>ctx = ctx\n</code></pre>"},{"location":"api/base/#fr24.base.ArrowTable.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = table\n</code></pre>"},{"location":"api/base/#fr24.base.ArrowTable.df","title":"df  <code>property</code>","text":"<pre><code>df: DataFrame\n</code></pre>"},{"location":"api/base/#fr24.base.ArrowTable.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    ctx: Ctx, fp: Path, sch_expected: Schema | None = None\n) -&gt; Self\n</code></pre> <p>Loads data from a parquet file, enforcing the schema if provided.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when column names and/or types are unrecognised</p>"},{"location":"api/base/#fr24.base.ArrowTable.concat","title":"concat","text":"<pre><code>concat(other: Self, inplace: bool = False) -&gt; Self\n</code></pre>"},{"location":"api/base/#fr24.base.ArrowTable.save","title":"save","text":"<pre><code>save(\n    fp: Path | BinaryIO,\n    fmt: Literal[\"parquet\", \"csv\"] = \"parquet\",\n) -&gt; Self\n</code></pre> <p>Writes the table as the specified format, with the schema if defined.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Path | BinaryIO</code> <p>The path of file-like object to write to, e.g. <code>sys.stdout.buffer</code></p> required"},{"location":"api/base/#fr24.base.ArrowTable.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre>"},{"location":"api/base/#fr24.base.ServiceBase","title":"ServiceBase","text":"<p>               Bases: <code>ABC</code></p> <p>A service to handle the API and disk operations.</p>"},{"location":"api/base/#fr24.base.ServiceBase.fetch","title":"fetch  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>fetch(*args: Any, **kwargs: Any) -&gt; APIResponse[Any, Any]\n</code></pre> <p>Fetches data from the API.</p>"},{"location":"api/base/#fr24.base.ServiceBase.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load(*args: Any, **kwargs: Any) -&gt; ArrowTable[Any]\n</code></pre> <p>Loads data from storage.</p>"},{"location":"api/core/","title":"Core","text":"<p>See the library quickstart to learn more.</p>"},{"location":"api/core/#fr24.core","title":"core","text":""},{"location":"api/core/#fr24.core.FR24","title":"FR24","text":"<pre><code>FR24(\n    client: AsyncClient | None = None,\n    *,\n    base_dir: str = user_cache_dir(\"fr24\")\n)\n</code></pre> <p>See docs quickstart.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AsyncClient | None</code> <p>The <code>httpx</code> client to use. If not provided, a new one will be created with HTTP/2 enabled by default. It is recommended to use <code>http2=True</code> to avoid 464 errors and to be consistent with the browser.</p> <code>None</code> <code>base_dir</code> <code>str</code> <p>See cache directory.</p> <code>user_cache_dir('fr24')</code>"},{"location":"api/core/#fr24.core.FR24.login","title":"login  <code>async</code>","text":"<pre><code>login(\n    creds: (\n        TokenSubscriptionKey\n        | UsernamePassword\n        | None\n        | Literal[\"from_env\"]\n    ) = \"from_env\",\n) -&gt; None\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>creds</code> <code>TokenSubscriptionKey | UsernamePassword | None | Literal['from_env']</code> <p>Reads credentials from the environment variables or the config file if <code>creds</code> is set to <code>\"from_env\"</code> (default). Otherwise, provide the credentials directly.</p> <code>'from_env'</code>"},{"location":"api/core/#fr24.core.FlightListAPIResp","title":"FlightListAPIResp","text":"<pre><code>FlightListAPIResp(ctx: Ctx, response: ApiRspRaw)\n</code></pre> <p>               Bases: <code>APIResponse[FlightListContext, FlightList]</code></p> <p>A wrapper around the flight list API response.</p>"},{"location":"api/core/#fr24.core.FlightListAPIResp.to_arrow","title":"to_arrow","text":"<pre><code>to_arrow() -&gt; FlightListArrow\n</code></pre> <p>Parse each fr24.types.fr24.FlightListItem in the API response and transform it into a pyarrow.Table.</p>"},{"location":"api/core/#fr24.core.FlightListArrow","title":"FlightListArrow","text":"<pre><code>FlightListArrow(ctx: Ctx, table: Table)\n</code></pre> <p>               Bases: <code>ArrowTable[FlightListContext]</code></p> <p>A wrapper around a pyarrow.Table containing flight list data.</p>"},{"location":"api/core/#fr24.core.FlightListArrow.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    ctx: Ctx, fp: Path, sch_expected: Schema | None = None\n) -&gt; Self\n</code></pre> <p>Loads data from a parquet file, enforcing the schema if provided.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when column names and/or types are unrecognised</p>"},{"location":"api/core/#fr24.core.FlightListArrow.concat","title":"concat","text":"<pre><code>concat(\n    data_new: FlightListArrow, inplace: bool = False\n) -&gt; FlightListArrow\n</code></pre> <p>Returns a new list of flights merged with the current table. Duplicates are removed from the current table, which results in all <code>Estimated</code> flights to be updated with the new data (if any).</p> <p>Parameters:</p> Name Type Description Default <code>inplace</code> <code>bool</code> <p>If <code>True</code>, the current table will be updated in place.</p> <code>False</code>"},{"location":"api/core/#fr24.core.FlightListArrow.save","title":"save","text":"<pre><code>save(\n    fp: Path | BinaryIO | None = None,\n    fmt: Literal[\"parquet\", \"csv\"] = \"parquet\",\n) -&gt; Self\n</code></pre> <p>Write the table to the given file path or file-like object, e.g. <code>./tmp/foo.parquet</code>, <code>sys.stdout.buffer</code>.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Path | BinaryIO | None</code> <p>File path to save the table to. If <code>None</code>, the table will be saved to the appropriate cache directory.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a format other than <code>parquet</code> is provided when saving to cache.</p>"},{"location":"api/core/#fr24.core.FlightListService","title":"FlightListService","text":"<pre><code>FlightListService(http: HTTPClient, base_dir: Path)\n</code></pre> <p>               Bases: <code>ServiceBase</code></p> <p>A service to handle the flight list API and file operations.</p>"},{"location":"api/core/#fr24.core.FlightListService.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch(\n    *,\n    reg: str | None = None,\n    flight: str | None = None,\n    page: int = 1,\n    limit: int = 10,\n    timestamp: (\n        int | datetime | Timestamp | str | None\n    ) = \"now\"\n) -&gt; FlightListAPIResp\n</code></pre> <p>Fetch one page of flight list for the given registration or flight number.</p> <p>Related: fr24.history.flight_list</p> <p>Input either the registration or the flight number, not both.</p> <p>Parameters:</p> Name Type Description Default <code>reg</code> <code>str | None</code> <p>Aircraft registration (e.g. <code>B-HUJ</code>)</p> <code>None</code> <code>flight</code> <code>str | None</code> <p>Flight number (e.g. <code>CX8747</code>)</p> <code>None</code> <code>limit</code> <code>int</code> <p>Number of flights per page - use <code>100</code> if authenticated</p> <code>10</code> <code>timestamp</code> <code>int | datetime | Timestamp | str | None</code> <p>Show flights with ATD before this Unix timestamp</p> <code>'now'</code>"},{"location":"api/core/#fr24.core.FlightListService.fetch_all","title":"fetch_all  <code>async</code>","text":"<pre><code>fetch_all(\n    *,\n    reg: str | None = None,\n    flight: str | None = None,\n    page: int = 1,\n    limit: int = 10,\n    timestamp: (\n        int | datetime | Timestamp | str | None\n    ) = \"now\",\n    delay: int = 5\n) -&gt; AsyncIterator[FlightListAPIResp]\n</code></pre> <p>Iteratively fetch all pages of the flight list for the given registration or flight number.</p> <p>Related: fr24.history.flight_list</p> <p>Input either the registration or the flight number, not both.</p> <p>Parameters:</p> Name Type Description Default <code>reg</code> <code>str | None</code> <p>Aircraft registration (e.g. <code>B-HUJ</code>)</p> <code>None</code> <code>flight</code> <code>str | None</code> <p>Flight number (e.g. <code>CX8747</code>)</p> <code>None</code> <code>limit</code> <code>int</code> <p>Number of flights per page - use <code>100</code> if authenticated</p> <code>10</code> <code>timestamp</code> <code>int | datetime | Timestamp | str | None</code> <p>Show flights with ATD before this Unix timestamp</p> <code>'now'</code> <code>delay</code> <code>int</code> <p>Delay between requests in seconds</p> <code>5</code>"},{"location":"api/core/#fr24.core.FlightListService.load","title":"load","text":"<pre><code>load(\n    *, reg: str | None = None, flight: str | None = None\n) -&gt; FlightListArrow\n</code></pre> <p>Get flight list for the given registration or flight number from the cache. If the file does not exist, an empty table will be returned.</p> <p>Input either the registration or the flight number, not both.</p>"},{"location":"api/core/#fr24.core.PlaybackAPI","title":"PlaybackAPI","text":"<pre><code>PlaybackAPI(http: HTTPClient)\n</code></pre>"},{"location":"api/core/#fr24.core.PlaybackApiResp","title":"PlaybackApiResp","text":"<pre><code>PlaybackApiResp(ctx: Ctx, response: ApiRspRaw)\n</code></pre> <p>               Bases: <code>APIResponse[PlaybackContext, Playback]</code></p> <p>A wrapper around the playback API response.</p>"},{"location":"api/core/#fr24.core.PlaybackApiResp.to_arrow","title":"to_arrow","text":"<pre><code>to_arrow() -&gt; PlaybackArrow\n</code></pre> <p>Parse each fr24.types.fr24.TrackData in the API response and transform it into a wrapped pyarrow.Table. Also adds fr24.types.fr24.FlightData into the schema's metadata with key <code>_flight</code>.</p>"},{"location":"api/core/#fr24.core.PlaybackArrow","title":"PlaybackArrow","text":"<pre><code>PlaybackArrow(ctx: Ctx, table: Table)\n</code></pre> <p>               Bases: <code>ArrowTable[PlaybackContext]</code></p> <p>Arrow table for playback data.</p>"},{"location":"api/core/#fr24.core.PlaybackArrow.metadata","title":"metadata  <code>property</code>","text":"<pre><code>metadata: FlightData | None\n</code></pre> <p>Parse the flight metadata from the arrow table.</p>"},{"location":"api/core/#fr24.core.PlaybackArrow.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    ctx: Ctx, fp: Path, sch_expected: Schema | None = None\n) -&gt; Self\n</code></pre> <p>Loads data from a parquet file, enforcing the schema if provided.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when column names and/or types are unrecognised</p>"},{"location":"api/core/#fr24.core.PlaybackArrow.save","title":"save","text":"<pre><code>save(\n    fp: Path | BinaryIO | None = None,\n    fmt: Literal[\"parquet\", \"csv\"] = \"parquet\",\n) -&gt; Self\n</code></pre> <p>Write the table to the given file path or file-like object, e.g. <code>./tmp/foo.parquet</code>, <code>sys.stdout.buffer</code>.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Path | BinaryIO | None</code> <p>File path to save the table to. If <code>None</code>, the table will be saved to the appropriate cache directory.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a format other than <code>parquet</code> is provided when saving to cache.</p>"},{"location":"api/core/#fr24.core.PlaybackService","title":"PlaybackService","text":"<pre><code>PlaybackService(http: HTTPClient, base_dir: Path)\n</code></pre> <p>               Bases: <code>ServiceBase</code></p> <p>A service to handle the playback API and file operations.</p>"},{"location":"api/core/#fr24.core.PlaybackService.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch(\n    flight_id: str | int,\n    timestamp: (\n        int | datetime | Timestamp | str | None\n    ) = None,\n) -&gt; PlaybackApiResp\n</code></pre> <p>Fetch the historical track playback data for the given flight.</p> <p>Related: fr24.history.playback</p> <p>Parameters:</p> Name Type Description Default <code>flight_id</code> <code>str | int</code> <p>Hex Flight ID (e.g. <code>\"2d81a27\"</code>, <code>0x2d81a27</code>)</p> required <code>timestamp</code> <code>int | datetime | Timestamp | str | None</code> <p>Unix timestamp (seconds) of ATD - optional, but it is recommended to include it</p> <code>None</code>"},{"location":"api/core/#fr24.core.PlaybackService.load","title":"load","text":"<pre><code>load(flight_id: str | int) -&gt; PlaybackArrow\n</code></pre> <p>Get playback data for the given flight ID from the cache. If the file does not exist, an empty table will be returned.</p>"},{"location":"api/core/#fr24.core.LiveFeedAPIResp","title":"LiveFeedAPIResp","text":"<pre><code>LiveFeedAPIResp(ctx: Ctx, response: ApiRspRaw)\n</code></pre> <p>               Bases: <code>APIResponse[LiveFeedContext, list[LiveFeedRecord]]</code></p> <p>A wrapper around the live feed API response.</p>"},{"location":"api/core/#fr24.core.LiveFeedAPIResp.to_arrow","title":"to_arrow","text":"<pre><code>to_arrow() -&gt; LiveFeedArrow\n</code></pre> <p>Parse each fr24.types.cache.LiveFeedRecord in the API response and transform it into a wrapped pyarrow.Table.</p>"},{"location":"api/core/#fr24.core.LiveFeedArrow","title":"LiveFeedArrow","text":"<pre><code>LiveFeedArrow(ctx: Ctx, table: Table)\n</code></pre> <p>               Bases: <code>ArrowTable[LiveFeedContext]</code></p> <p>Arrow table for live feed data.</p>"},{"location":"api/core/#fr24.core.LiveFeedArrow.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    ctx: Ctx, fp: Path, sch_expected: Schema | None = None\n) -&gt; Self\n</code></pre> <p>Loads data from a parquet file, enforcing the schema if provided.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when column names and/or types are unrecognised</p>"},{"location":"api/core/#fr24.core.LiveFeedArrow.save","title":"save","text":"<pre><code>save(\n    fp: Path | BinaryIO | None = None,\n    fmt: Literal[\"parquet\", \"csv\"] = \"parquet\",\n) -&gt; Self\n</code></pre> <p>Write the table to the given file path or file-like object, e.g. <code>./tmp/foo.parquet</code>, <code>sys.stdout</code>.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Path | BinaryIO | None</code> <p>File path to save the table to. If <code>None</code>, the table will be saved to the appropriate cache directory.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a format other than <code>parquet</code> is provided when saving to cache.</p>"},{"location":"api/core/#fr24.core.LiveFeedService","title":"LiveFeedService","text":"<pre><code>LiveFeedService(http: HTTPClient, base_dir: Path)\n</code></pre> <p>               Bases: <code>ServiceBase</code></p> <p>A service to handle the live feed API and file operations.</p>"},{"location":"api/core/#fr24.core.LiveFeedService.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch(\n    timestamp: (\n        int | str | datetime | Timestamp | None\n    ) = None,\n    *,\n    duration: int | None = None,\n    hfreq: int | None = None,\n    limit: int = 1500,\n    fields: list[LivefeedField] = [\n        \"flight\",\n        \"reg\",\n        \"route\",\n        \"type\",\n    ]\n) -&gt; LiveFeedAPIResp\n</code></pre> <p>Fetch live feed data.</p> <p>Related: fr24.livefeed.livefeed_world_data</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>int | str | datetime | Timestamp | None</code> <p>Unix timestamp (seconds) of the live feed data. If <code>None</code>, the latest live data will be fetched. Otherwise, historical data will be fetched instead.</p> <code>None</code> <code>duration</code> <code>int | None</code> <p>Prefetch duration (default: <code>7</code> seconds). Should only be set for historical data.</p> <code>None</code> <code>hfreq</code> <code>int | None</code> <p>High frequency mode (default: <code>0</code>). Should only be set for historical data.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Max number of flights (default 1500 for unauthenticated users, 2000 for authenticated users)</p> <code>1500</code> <code>fields</code> <code>list[LivefeedField]</code> <p>fields to include - for unauthenticated users, max 4 fields. When authenticated, <code>squawk</code>, <code>vspeed</code>, <code>airspace</code>, <code>logo_id</code> and <code>age</code> can be included</p> <code>['flight', 'reg', 'route', 'type']</code>"},{"location":"api/core/#fr24.core.LiveFeedService.load","title":"load","text":"<pre><code>load(\n    timestamp: int | str | datetime | Timestamp,\n) -&gt; LiveFeedArrow\n</code></pre> <p>Get live feed data from the cache. If the file does not exist, an empty table will be returned.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>int | str | datetime | Timestamp</code> <p>Unix timestamp (seconds) of the saved feed snapshot.</p> required"},{"location":"api/functions/","title":"Functions","text":"<p>See the example gallery to learn more.</p>"},{"location":"api/functions/#fr24.livefeed","title":"livefeed","text":""},{"location":"api/functions/#fr24.livefeed.livefeed_message_create","title":"livefeed_message_create","text":"<pre><code>livefeed_message_create(\n    north: float = 50,\n    south: float = 40,\n    west: float = 0,\n    east: float = 10,\n    stats: bool = False,\n    limit: int = 1500,\n    maxage: int = 14400,\n    fields: list[LivefeedField] = [\n        \"flight\",\n        \"reg\",\n        \"route\",\n        \"type\",\n    ],\n    **kwargs: Any\n) -&gt; LiveFeedRequest\n</code></pre> <p>Create the LiveFeedRequest protobuf message</p> <p>Parameters:</p> Name Type Description Default <code>north</code> <code>float</code> <p>North latitude</p> <code>50</code> <code>south</code> <code>float</code> <p>South latitude</p> <code>40</code> <code>west</code> <code>float</code> <p>West longitude</p> <code>0</code> <code>east</code> <code>float</code> <p>East longitude</p> <code>10</code> <code>stats</code> <code>bool</code> <p>Include stats of the given area</p> <code>False</code> <code>limit</code> <code>int</code> <p>Max number of flights (default 1500 for unauthenticated users, 2000 for authenticated users)</p> <code>1500</code> <code>maxage</code> <code>int</code> <p>Max age since last update, seconds</p> <code>14400</code> <code>fields</code> <code>list[LivefeedField]</code> <p>fields to include - for unauthenticated users, max 4 fields. When authenticated, <code>squawk</code>, <code>vspeed</code>, <code>airspace</code>, <code>logo_id</code> and <code>age</code> can be included</p> <code>['flight', 'reg', 'route', 'type']</code>"},{"location":"api/functions/#fr24.livefeed.livefeed_playback_message_create","title":"livefeed_playback_message_create","text":"<pre><code>livefeed_playback_message_create(\n    message: LiveFeedRequest,\n    timestamp: int,\n    prefetch: int,\n    hfreq: int,\n) -&gt; PlaybackRequest\n</code></pre> <p>Create the live feed playback request protobuf message.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>int</code> <p>Start timestamp</p> required <code>prefetch</code> <code>int</code> <p>End timestamp: should be start timestamp + 7 seconds</p> required <code>hfreq</code> <code>int</code> <p>High frequency mode</p> required"},{"location":"api/functions/#fr24.livefeed.livefeed_request_create","title":"livefeed_request_create","text":"<pre><code>livefeed_request_create(\n    message: LiveFeedRequest,\n    auth: None | Authentication = None,\n) -&gt; Request\n</code></pre> <p>Construct the POST request with encoded gRPC body.</p>"},{"location":"api/functions/#fr24.livefeed.livefeed_playback_request_create","title":"livefeed_playback_request_create","text":"<pre><code>livefeed_playback_request_create(\n    message: PlaybackRequest,\n    auth: None | Authentication = None,\n) -&gt; Request\n</code></pre> <p>Constructs the POST request with encoded gRPC body.</p>"},{"location":"api/functions/#fr24.livefeed.livefeed_post","title":"livefeed_post  <code>async</code>","text":"<pre><code>livefeed_post(\n    client: AsyncClient, request: Request\n) -&gt; bytes\n</code></pre> <p>Send the request and extract the raw protobuf message.</p>"},{"location":"api/functions/#fr24.livefeed.livefeed_response_parse","title":"livefeed_response_parse","text":"<pre><code>livefeed_response_parse(data: bytes) -&gt; LiveFeedResponse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>raw protobuf message</p> required"},{"location":"api/functions/#fr24.livefeed.livefeed_playback_response_parse","title":"livefeed_playback_response_parse","text":"<pre><code>livefeed_playback_response_parse(\n    data: bytes,\n) -&gt; LiveFeedResponse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>raw protobuf message</p> required"},{"location":"api/functions/#fr24.livefeed.livefeed_flightdata_dict","title":"livefeed_flightdata_dict","text":"<pre><code>livefeed_flightdata_dict(lfr: Flight) -&gt; LiveFeedRecord\n</code></pre> <p>Convert the protobuf message to a dictionary.</p>"},{"location":"api/functions/#fr24.livefeed.livefeed_world_data","title":"livefeed_world_data  <code>async</code>","text":"<pre><code>livefeed_world_data(\n    client: AsyncClient,\n    auth: None | Authentication = None,\n    limit: int = 1500,\n    fields: list[LivefeedField] = [\n        \"flight\",\n        \"reg\",\n        \"route\",\n        \"type\",\n    ],\n) -&gt; list[LiveFeedRecord]\n</code></pre> <p>Retrieve live feed data for the entire world, in chunks.</p>"},{"location":"api/functions/#fr24.livefeed.livefeed_playback_world_data","title":"livefeed_playback_world_data  <code>async</code>","text":"<pre><code>livefeed_playback_world_data(\n    client: AsyncClient,\n    timestamp: int,\n    duration: int = 7,\n    hfreq: int = 0,\n    auth: None | Authentication = None,\n    limit: int = 1500,\n    fields: list[LivefeedField] = [\n        \"flight\",\n        \"reg\",\n        \"route\",\n        \"type\",\n    ],\n) -&gt; list[LiveFeedRecord]\n</code></pre> <p>Retrieve live feed playback data for the entire world, in chunks.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>if more than half of the requests fail</p>"},{"location":"api/functions/#fr24.history","title":"history","text":""},{"location":"api/functions/#fr24.history.flight_list","title":"flight_list  <code>async</code>","text":"<pre><code>flight_list(\n    client: AsyncClient,\n    reg: None | str = None,\n    flight: None | str = None,\n    page: int = 1,\n    limit: int = 10,\n    timestamp: (\n        int | datetime | Timestamp | str | None\n    ) = \"now\",\n    auth: None | Authentication = None,\n) -&gt; FlightList\n</code></pre> <p>Fetch metadata/history of flights for a given aircraft or flight number.</p> <p>Includes basic information such as status, O/D, scheduled/estimated/real times: see fr24.types.fr24.FlightData for more details.</p> <p>Use either <code>reg</code> or <code>flight</code> to query. To determine if there are more pages to query, check the response .result.response.page.more.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AsyncClient</code> <p>HTTPX async client</p> required <code>reg</code> <code>None | str</code> <p>Aircraft registration (e.g. <code>B-HUJ</code>)</p> <code>None</code> <code>flight</code> <code>None | str</code> <p>Flight number (e.g. <code>CX8747</code>)</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number</p> <code>1</code> <code>limit</code> <code>int</code> <p>Number of results per page - use <code>100</code> if authenticated.</p> <code>10</code> <code>timestamp</code> <code>int | datetime | Timestamp | str | None</code> <p>Show flights with ATD before this Unix timestamp</p> <code>'now'</code> <code>auth</code> <code>None | Authentication</code> <p>Authentication data</p> <code>None</code>"},{"location":"api/functions/#fr24.history.airport_list","title":"airport_list  <code>async</code>","text":"<pre><code>airport_list(\n    client: AsyncClient,\n    airport: str,\n    mode: (\n        Literal[\"arrivals\"]\n        | Literal[\"departures\"]\n        | Literal[\"ground\"]\n    ),\n    page: int = 1,\n    limit: int = 10,\n    timestamp: (\n        int | datetime | Timestamp | str | None\n    ) = \"now\",\n    auth: None | Authentication = None,\n) -&gt; AirportList\n</code></pre> <p>Fetch aircraft arriving, departing or on ground at a given airport.</p> <p>Returns on ground/scheduled/estimated/real times: see fr24.types.fr24.FlightListItem for more details.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AsyncClient</code> <p>HTTPX async client</p> required <code>airport</code> <code>str</code> <p>IATA airport code (e.g. <code>HKG</code>)</p> required <code>mode</code> <code>Literal['arrivals'] | Literal['departures'] | Literal['ground']</code> <p>arrivals, departures or on ground aircraft</p> required <code>page</code> <code>int</code> <p>Page number</p> <code>1</code> <code>limit</code> <code>int</code> <p>Number of results per page (max 100)</p> <code>10</code> <code>timestamp</code> <code>int | datetime | Timestamp | str | None</code> <p>Show flights with STA before this Unix timestamp</p> <code>'now'</code> <code>auth</code> <code>None | Authentication</code> <p>Authentication data</p> <code>None</code>"},{"location":"api/functions/#fr24.history.playback","title":"playback  <code>async</code>","text":"<pre><code>playback(\n    client: AsyncClient,\n    flight_id: int | str,\n    timestamp: (\n        int | str | datetime | Timestamp | None\n    ) = None,\n    auth: None | Authentication = None,\n) -&gt; Playback\n</code></pre> <p>Fetch historical track playback data for a given flight.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AsyncClient</code> <p>HTTPX async client</p> required <code>flight_id</code> <code>int | str</code> <p>fr24 hex flight id</p> required <code>timestamp</code> <code>int | str | datetime | Timestamp | None</code> <p>Unix timestamp (seconds) of ATD - optional, but it is recommended to include it</p> <code>None</code> <code>auth</code> <code>None | Authentication</code> <p>Authentication data</p> <code>None</code>"},{"location":"api/functions/#fr24.history.playback_metadata_dict","title":"playback_metadata_dict","text":"<pre><code>playback_metadata_dict(flight: FlightData) -&gt; dict\n</code></pre> <p>Flatten and rename important variables in the flight metadata to a dictionary.</p>"},{"location":"api/functions/#fr24.history.playback_track_dict","title":"playback_track_dict","text":"<pre><code>playback_track_dict(\n    point: TrackData,\n) -&gt; PlaybackTrackRecord\n</code></pre> <p>Flatten and rename each variable in this observation into a new dictionary.</p> <p>Note</p> <p>The JSON response claims that <code>heading</code> is available, but ADS-B only transmits the ground track. Heading is only available in EMS data.</p> <p>We rename it to <code>track</code> to avoid confusion.</p>"},{"location":"api/functions/#fr24.history.playback_track_ems_dict","title":"playback_track_ems_dict","text":"<pre><code>playback_track_ems_dict(\n    point: TrackData,\n) -&gt; PlaybackTrackEMSRecord | None\n</code></pre> <p>If the Enhanced Mode-S data is available in this observation, flatten and rename each variable to a dictionary. Otherwise, return <code>None</code>.</p>"},{"location":"api/functions/#fr24.history.playback_arrow","title":"playback_arrow","text":"<pre><code>playback_arrow(data: Playback) -&gt; Table\n</code></pre> <p>Parse each fr24.types.fr24.TrackData in the API response into a pyarrow.Table. Also adds fr24.types.fr24.FlightData into the schema's metadata with key <code>_flight</code>.</p> <p>If the response is empty, a warning is logged and an empty table is returned</p>"},{"location":"api/functions/#fr24.history.playback_df","title":"playback_df","text":"<pre><code>playback_df(data: Playback) -&gt; DataFrame\n</code></pre> <p>Parse each fr24.types.fr24.TrackData in the API response into a pandas DataFrame. Also adds fr24.types.fr24.FlightData into the DataFrame's <code>.attrs</code>.</p> <p>If the response is empty, a warning is logged and an empty table is returned</p>"},{"location":"api/functions/#fr24.history.flight_list_dict","title":"flight_list_dict","text":"<pre><code>flight_list_dict(entry: FlightListItem) -&gt; FlightListRecord\n</code></pre> <p>Flatten a flight entry into dict, converting fr24 hex ids into integers.</p>"},{"location":"api/functions/#fr24.history.flight_list_arrow","title":"flight_list_arrow","text":"<pre><code>flight_list_arrow(data: FlightList) -&gt; Table\n</code></pre> <p>Parse each fr24.types.fr24.FlightListItem in the API response into a pyarrow.Table.</p> <p>If the response is empty, a warning is logged and an empty table is returned</p>"},{"location":"api/functions/#fr24.history.flight_list_df","title":"flight_list_df","text":"<pre><code>flight_list_df(data: FlightList) -&gt; DataFrame\n</code></pre> <p>Parse each fr24.types.fr24.FlightListItem in the API response into a pandas DataFrame.</p> <p>If the response is empty, a warning is logged and an empty table is returned</p>"},{"location":"api/functions/#fr24.find","title":"find","text":""},{"location":"api/functions/#fr24.find.find","title":"find  <code>async</code>","text":"<pre><code>find(client: AsyncClient, query: str) -&gt; None | FindResult\n</code></pre> <p>General search.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Airport, schedule (HKG-CDG), or aircraft.</p> required"},{"location":"api/functions/#fr24.authentication","title":"authentication","text":""},{"location":"api/functions/#fr24.authentication.get_credentials","title":"get_credentials","text":"<pre><code>get_credentials() -&gt; (\n    TokenSubscriptionKey | UsernamePassword | None\n)\n</code></pre> <p>Reads credentials from the environment variables, overriding it with the config file if it exists.</p>"},{"location":"api/functions/#fr24.authentication.login","title":"login  <code>async</code>","text":"<pre><code>login(\n    client: AsyncClient,\n    creds: (\n        TokenSubscriptionKey\n        | UsernamePassword\n        | None\n        | Literal[\"from_env\"]\n    ) = \"from_env\",\n) -&gt; None | Authentication\n</code></pre> <p>Read credentials and logs into the API.</p> <p>By default, credentials are read from the environment variables or the config file if <code>creds_override</code> is not set. Then, if the credentials: - <code>username</code> and <code>password</code> is set: makes a POST request to the login endpoint - <code>subscription_key</code> and <code>token</code> is set: returns immediately - otherwise, <code>None</code> is returned</p>"},{"location":"api/functions/#fr24.authentication.login_with_username_password","title":"login_with_username_password  <code>async</code>","text":"<pre><code>login_with_username_password(\n    client: AsyncClient, username: str, password: str\n) -&gt; Authentication\n</code></pre> <p>Retrieve bearer token and subscription key from the API.</p> <p>Bearer: <code>json['userData']['accessToken']</code> <code>token=</code> query param: <code>json['userData']['subscriptionKey']</code></p>"},{"location":"api/functions/#fr24.authentication.login_with_token_subscription_key","title":"login_with_token_subscription_key  <code>async</code>","text":"<pre><code>login_with_token_subscription_key(\n    _client: AsyncClient,\n    subscription_key: str,\n    token: str | None,\n) -&gt; Authentication | None\n</code></pre> <p>Login with subscription key and/or token. Falls back to anonymous access if token is expired or invalid.</p>"},{"location":"api/protobuf/","title":"Protobuf Messages","text":"<p>The .proto file can be found here.</p>"},{"location":"api/protobuf/#fr24.proto","title":"proto","text":""},{"location":"api/protobuf/#fr24.proto.request_pb2","title":"request_pb2","text":"<p>Generated protocol buffer code.</p>"},{"location":"api/protobuf/#fr24.proto.request_pb2._sym_db","title":"_sym_db  <code>module-attribute</code>","text":"<pre><code>_sym_db = Default()\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2._globals","title":"_globals  <code>module-attribute</code>","text":"<pre><code>_globals = globals()\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NOT_VISIBLE","title":"NOT_VISIBLE  <code>module-attribute</code>","text":"<pre><code>NOT_VISIBLE: RestrictionVisibility\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PARTIALLY_VISIBLE","title":"PARTIALLY_VISIBLE  <code>module-attribute</code>","text":"<pre><code>PARTIALLY_VISIBLE: RestrictionVisibility\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FULLY_VISIBLE","title":"FULLY_VISIBLE  <code>module-attribute</code>","text":"<pre><code>FULLY_VISIBLE: RestrictionVisibility\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PASSENGER","title":"PASSENGER  <code>module-attribute</code>","text":"<pre><code>PASSENGER: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.CARGO","title":"CARGO  <code>module-attribute</code>","text":"<pre><code>CARGO: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.MILITARY_AND_GOVERNMENT","title":"MILITARY_AND_GOVERNMENT  <code>module-attribute</code>","text":"<pre><code>MILITARY_AND_GOVERNMENT: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.BUSINESS_JETS","title":"BUSINESS_JETS  <code>module-attribute</code>","text":"<pre><code>BUSINESS_JETS: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.GENERAL_AVIATION","title":"GENERAL_AVIATION  <code>module-attribute</code>","text":"<pre><code>GENERAL_AVIATION: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.HELICOPTERS","title":"HELICOPTERS  <code>module-attribute</code>","text":"<pre><code>HELICOPTERS: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LIGHTER_THAN_AIR","title":"LIGHTER_THAN_AIR  <code>module-attribute</code>","text":"<pre><code>LIGHTER_THAN_AIR: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.GLIDERS","title":"GLIDERS  <code>module-attribute</code>","text":"<pre><code>GLIDERS: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DRONES","title":"DRONES  <code>module-attribute</code>","text":"<pre><code>DRONES: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.GROUND_VEHICLES","title":"GROUND_VEHICLES  <code>module-attribute</code>","text":"<pre><code>GROUND_VEHICLES: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.OTHER_SERVICE","title":"OTHER_SERVICE  <code>module-attribute</code>","text":"<pre><code>OTHER_SERVICE: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NON_CATEGORIZED","title":"NON_CATEGORIZED  <code>module-attribute</code>","text":"<pre><code>NON_CATEGORIZED: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.BOTH","title":"BOTH  <code>module-attribute</code>","text":"<pre><code>BOTH: AirportFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.INBOUND","title":"INBOUND  <code>module-attribute</code>","text":"<pre><code>INBOUND: AirportFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.OUTBOUND","title":"OUTBOUND  <code>module-attribute</code>","text":"<pre><code>OUTBOUND: AirportFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PAINTED_AS","title":"PAINTED_AS  <code>module-attribute</code>","text":"<pre><code>PAINTED_AS: AirlineFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.OPERATED_AS","title":"OPERATED_AS  <code>module-attribute</code>","text":"<pre><code>OPERATED_AS: AirlineFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NONE","title":"NONE  <code>module-attribute</code>","text":"<pre><code>NONE: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.GROUND_ONLY","title":"GROUND_ONLY  <code>module-attribute</code>","text":"<pre><code>GROUND_ONLY: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AIRBORNE_ONLY","title":"AIRBORNE_ONLY  <code>module-attribute</code>","text":"<pre><code>AIRBORNE_ONLY: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ALL","title":"ALL  <code>module-attribute</code>","text":"<pre><code>ALL: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ADSB","title":"ADSB  <code>module-attribute</code>","text":"<pre><code>ADSB: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.MLAT","title":"MLAT  <code>module-attribute</code>","text":"<pre><code>MLAT: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FLARM","title":"FLARM  <code>module-attribute</code>","text":"<pre><code>FLARM: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FAA","title":"FAA  <code>module-attribute</code>","text":"<pre><code>FAA: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ESTIMATED","title":"ESTIMATED  <code>module-attribute</code>","text":"<pre><code>ESTIMATED: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SATELLITE","title":"SATELLITE  <code>module-attribute</code>","text":"<pre><code>SATELLITE: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.OTHER_DATA_SOURCE","title":"OTHER_DATA_SOURCE  <code>module-attribute</code>","text":"<pre><code>OTHER_DATA_SOURCE: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.UAT","title":"UAT  <code>module-attribute</code>","text":"<pre><code>UAT: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SPIDERTRACKS","title":"SPIDERTRACKS  <code>module-attribute</code>","text":"<pre><code>SPIDERTRACKS: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AUS","title":"AUS  <code>module-attribute</code>","text":"<pre><code>AUS: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.B738","title":"B738  <code>module-attribute</code>","text":"<pre><code>B738: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FGTR","title":"FGTR  <code>module-attribute</code>","text":"<pre><code>FGTR: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ASW20","title":"ASW20  <code>module-attribute</code>","text":"<pre><code>ASW20: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.C206","title":"C206  <code>module-attribute</code>","text":"<pre><code>C206: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.C303","title":"C303  <code>module-attribute</code>","text":"<pre><code>C303: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LJ60","title":"LJ60  <code>module-attribute</code>","text":"<pre><code>LJ60: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Q300","title":"Q300  <code>module-attribute</code>","text":"<pre><code>Q300: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.B736","title":"B736  <code>module-attribute</code>","text":"<pre><code>B736: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FOKKER100","title":"FOKKER100  <code>module-attribute</code>","text":"<pre><code>FOKKER100: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RJ85","title":"RJ85  <code>module-attribute</code>","text":"<pre><code>RJ85: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.A320","title":"A320  <code>module-attribute</code>","text":"<pre><code>A320: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.B757","title":"B757  <code>module-attribute</code>","text":"<pre><code>B757: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.B767","title":"B767  <code>module-attribute</code>","text":"<pre><code>B767: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.A3ST","title":"A3ST  <code>module-attribute</code>","text":"<pre><code>A3ST: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.MD11","title":"MD11  <code>module-attribute</code>","text":"<pre><code>MD11: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.A330","title":"A330  <code>module-attribute</code>","text":"<pre><code>A330: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.A343","title":"A343  <code>module-attribute</code>","text":"<pre><code>A343: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.A346","title":"A346  <code>module-attribute</code>","text":"<pre><code>A346: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.B777","title":"B777  <code>module-attribute</code>","text":"<pre><code>B777: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.B747","title":"B747  <code>module-attribute</code>","text":"<pre><code>B747: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.A380","title":"A380  <code>module-attribute</code>","text":"<pre><code>A380: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.A225","title":"A225  <code>module-attribute</code>","text":"<pre><code>A225: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SI2","title":"SI2  <code>module-attribute</code>","text":"<pre><code>SI2: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EC","title":"EC  <code>module-attribute</code>","text":"<pre><code>EC: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.BALL","title":"BALL  <code>module-attribute</code>","text":"<pre><code>BALL: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.GRND","title":"GRND  <code>module-attribute</code>","text":"<pre><code>GRND: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SLEI","title":"SLEI  <code>module-attribute</code>","text":"<pre><code>SLEI: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DRON","title":"DRON  <code>module-attribute</code>","text":"<pre><code>DRON: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SAT","title":"SAT  <code>module-attribute</code>","text":"<pre><code>SAT: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ISS","title":"ISS  <code>module-attribute</code>","text":"<pre><code>ISS: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NORMAL","title":"NORMAL  <code>module-attribute</code>","text":"<pre><code>NORMAL: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.BACKGROUND","title":"BACKGROUND  <code>module-attribute</code>","text":"<pre><code>BACKGROUND: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMERGENCY","title":"EMERGENCY  <code>module-attribute</code>","text":"<pre><code>EMERGENCY: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NOT_AVAILABLE","title":"NOT_AVAILABLE  <code>module-attribute</code>","text":"<pre><code>NOT_AVAILABLE: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LIVE","title":"LIVE  <code>module-attribute</code>","text":"<pre><code>LIVE: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NO_EMERGENCY","title":"NO_EMERGENCY  <code>module-attribute</code>","text":"<pre><code>NO_EMERGENCY: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.GENERAL_EMERGENCY","title":"GENERAL_EMERGENCY  <code>module-attribute</code>","text":"<pre><code>GENERAL_EMERGENCY: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LIFEGUARD_MEDICAL_EMERGENCY","title":"LIFEGUARD_MEDICAL_EMERGENCY  <code>module-attribute</code>","text":"<pre><code>LIFEGUARD_MEDICAL_EMERGENCY: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.MINIMUM_FUEL","title":"MINIMUM_FUEL  <code>module-attribute</code>","text":"<pre><code>MINIMUM_FUEL: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NO_COMMUNICATIONS","title":"NO_COMMUNICATIONS  <code>module-attribute</code>","text":"<pre><code>NO_COMMUNICATIONS: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.UNLAWFUL_INTERFERENCE","title":"UNLAWFUL_INTERFERENCE  <code>module-attribute</code>","text":"<pre><code>UNLAWFUL_INTERFERENCE: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DOWNED_AIRCRAFT","title":"DOWNED_AIRCRAFT  <code>module-attribute</code>","text":"<pre><code>DOWNED_AIRCRAFT: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RESERVED","title":"RESERVED  <code>module-attribute</code>","text":"<pre><code>RESERVED: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.UNKNOWN","title":"UNKNOWN  <code>module-attribute</code>","text":"<pre><code>UNKNOWN: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ON_GROUND","title":"ON_GROUND  <code>module-attribute</code>","text":"<pre><code>ON_GROUND: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TAKING_OFF","title":"TAKING_OFF  <code>module-attribute</code>","text":"<pre><code>TAKING_OFF: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AIRBORNE","title":"AIRBORNE  <code>module-attribute</code>","text":"<pre><code>AIRBORNE: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ON_APPROACH","title":"ON_APPROACH  <code>module-attribute</code>","text":"<pre><code>ON_APPROACH: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RestrictionVisibility","title":"RestrictionVisibility","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RestrictionVisibility.NOT_VISIBLE","title":"NOT_VISIBLE  <code>class-attribute</code>","text":"<pre><code>NOT_VISIBLE: RestrictionVisibility\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RestrictionVisibility.PARTIALLY_VISIBLE","title":"PARTIALLY_VISIBLE  <code>class-attribute</code>","text":"<pre><code>PARTIALLY_VISIBLE: RestrictionVisibility\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RestrictionVisibility.FULLY_VISIBLE","title":"FULLY_VISIBLE  <code>class-attribute</code>","text":"<pre><code>FULLY_VISIBLE: RestrictionVisibility\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service","title":"Service","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.PASSENGER","title":"PASSENGER  <code>class-attribute</code>","text":"<pre><code>PASSENGER: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.CARGO","title":"CARGO  <code>class-attribute</code>","text":"<pre><code>CARGO: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.MILITARY_AND_GOVERNMENT","title":"MILITARY_AND_GOVERNMENT  <code>class-attribute</code>","text":"<pre><code>MILITARY_AND_GOVERNMENT: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.BUSINESS_JETS","title":"BUSINESS_JETS  <code>class-attribute</code>","text":"<pre><code>BUSINESS_JETS: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.GENERAL_AVIATION","title":"GENERAL_AVIATION  <code>class-attribute</code>","text":"<pre><code>GENERAL_AVIATION: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.HELICOPTERS","title":"HELICOPTERS  <code>class-attribute</code>","text":"<pre><code>HELICOPTERS: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.LIGHTER_THAN_AIR","title":"LIGHTER_THAN_AIR  <code>class-attribute</code>","text":"<pre><code>LIGHTER_THAN_AIR: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.GLIDERS","title":"GLIDERS  <code>class-attribute</code>","text":"<pre><code>GLIDERS: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.DRONES","title":"DRONES  <code>class-attribute</code>","text":"<pre><code>DRONES: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.GROUND_VEHICLES","title":"GROUND_VEHICLES  <code>class-attribute</code>","text":"<pre><code>GROUND_VEHICLES: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.OTHER_SERVICE","title":"OTHER_SERVICE  <code>class-attribute</code>","text":"<pre><code>OTHER_SERVICE: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Service.NON_CATEGORIZED","title":"NON_CATEGORIZED  <code>class-attribute</code>","text":"<pre><code>NON_CATEGORIZED: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilterType","title":"AirportFilterType","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilterType.BOTH","title":"BOTH  <code>class-attribute</code>","text":"<pre><code>BOTH: AirportFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilterType.INBOUND","title":"INBOUND  <code>class-attribute</code>","text":"<pre><code>INBOUND: AirportFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilterType.OUTBOUND","title":"OUTBOUND  <code>class-attribute</code>","text":"<pre><code>OUTBOUND: AirportFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirlineFilterType","title":"AirlineFilterType","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirlineFilterType.PAINTED_AS","title":"PAINTED_AS  <code>class-attribute</code>","text":"<pre><code>PAINTED_AS: AirlineFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirlineFilterType.OPERATED_AS","title":"OPERATED_AS  <code>class-attribute</code>","text":"<pre><code>OPERATED_AS: AirlineFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TrafficType","title":"TrafficType","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TrafficType.NONE","title":"NONE  <code>class-attribute</code>","text":"<pre><code>NONE: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TrafficType.GROUND_ONLY","title":"GROUND_ONLY  <code>class-attribute</code>","text":"<pre><code>GROUND_ONLY: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TrafficType.AIRBORNE_ONLY","title":"AIRBORNE_ONLY  <code>class-attribute</code>","text":"<pre><code>AIRBORNE_ONLY: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TrafficType.ALL","title":"ALL  <code>class-attribute</code>","text":"<pre><code>ALL: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource","title":"DataSource","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.ADSB","title":"ADSB  <code>class-attribute</code>","text":"<pre><code>ADSB: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.MLAT","title":"MLAT  <code>class-attribute</code>","text":"<pre><code>MLAT: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.FLARM","title":"FLARM  <code>class-attribute</code>","text":"<pre><code>FLARM: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.FAA","title":"FAA  <code>class-attribute</code>","text":"<pre><code>FAA: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.ESTIMATED","title":"ESTIMATED  <code>class-attribute</code>","text":"<pre><code>ESTIMATED: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.SATELLITE","title":"SATELLITE  <code>class-attribute</code>","text":"<pre><code>SATELLITE: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.OTHER_DATA_SOURCE","title":"OTHER_DATA_SOURCE  <code>class-attribute</code>","text":"<pre><code>OTHER_DATA_SOURCE: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.UAT","title":"UAT  <code>class-attribute</code>","text":"<pre><code>UAT: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.SPIDERTRACKS","title":"SPIDERTRACKS  <code>class-attribute</code>","text":"<pre><code>SPIDERTRACKS: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.DataSource.AUS","title":"AUS  <code>class-attribute</code>","text":"<pre><code>AUS: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon","title":"Icon","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.B738","title":"B738  <code>class-attribute</code>","text":"<pre><code>B738: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.FGTR","title":"FGTR  <code>class-attribute</code>","text":"<pre><code>FGTR: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.ASW20","title":"ASW20  <code>class-attribute</code>","text":"<pre><code>ASW20: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.C206","title":"C206  <code>class-attribute</code>","text":"<pre><code>C206: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.C303","title":"C303  <code>class-attribute</code>","text":"<pre><code>C303: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.LJ60","title":"LJ60  <code>class-attribute</code>","text":"<pre><code>LJ60: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.Q300","title":"Q300  <code>class-attribute</code>","text":"<pre><code>Q300: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.B736","title":"B736  <code>class-attribute</code>","text":"<pre><code>B736: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.FOKKER100","title":"FOKKER100  <code>class-attribute</code>","text":"<pre><code>FOKKER100: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.RJ85","title":"RJ85  <code>class-attribute</code>","text":"<pre><code>RJ85: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.A320","title":"A320  <code>class-attribute</code>","text":"<pre><code>A320: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.B757","title":"B757  <code>class-attribute</code>","text":"<pre><code>B757: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.B767","title":"B767  <code>class-attribute</code>","text":"<pre><code>B767: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.A3ST","title":"A3ST  <code>class-attribute</code>","text":"<pre><code>A3ST: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.MD11","title":"MD11  <code>class-attribute</code>","text":"<pre><code>MD11: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.A330","title":"A330  <code>class-attribute</code>","text":"<pre><code>A330: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.A343","title":"A343  <code>class-attribute</code>","text":"<pre><code>A343: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.A346","title":"A346  <code>class-attribute</code>","text":"<pre><code>A346: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.B777","title":"B777  <code>class-attribute</code>","text":"<pre><code>B777: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.B747","title":"B747  <code>class-attribute</code>","text":"<pre><code>B747: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.A380","title":"A380  <code>class-attribute</code>","text":"<pre><code>A380: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.A225","title":"A225  <code>class-attribute</code>","text":"<pre><code>A225: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.SI2","title":"SI2  <code>class-attribute</code>","text":"<pre><code>SI2: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.EC","title":"EC  <code>class-attribute</code>","text":"<pre><code>EC: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.BALL","title":"BALL  <code>class-attribute</code>","text":"<pre><code>BALL: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.GRND","title":"GRND  <code>class-attribute</code>","text":"<pre><code>GRND: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.SLEI","title":"SLEI  <code>class-attribute</code>","text":"<pre><code>SLEI: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.DRON","title":"DRON  <code>class-attribute</code>","text":"<pre><code>DRON: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.SAT","title":"SAT  <code>class-attribute</code>","text":"<pre><code>SAT: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Icon.ISS","title":"ISS  <code>class-attribute</code>","text":"<pre><code>ISS: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Status","title":"Status","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Status.NORMAL","title":"NORMAL  <code>class-attribute</code>","text":"<pre><code>NORMAL: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Status.BACKGROUND","title":"BACKGROUND  <code>class-attribute</code>","text":"<pre><code>BACKGROUND: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Status.EMERGENCY","title":"EMERGENCY  <code>class-attribute</code>","text":"<pre><code>EMERGENCY: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Status.NOT_AVAILABLE","title":"NOT_AVAILABLE  <code>class-attribute</code>","text":"<pre><code>NOT_AVAILABLE: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Status.LIVE","title":"LIVE  <code>class-attribute</code>","text":"<pre><code>LIVE: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus","title":"EmergencyStatus","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.NO_EMERGENCY","title":"NO_EMERGENCY  <code>class-attribute</code>","text":"<pre><code>NO_EMERGENCY: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.GENERAL_EMERGENCY","title":"GENERAL_EMERGENCY  <code>class-attribute</code>","text":"<pre><code>GENERAL_EMERGENCY: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.LIFEGUARD_MEDICAL_EMERGENCY","title":"LIFEGUARD_MEDICAL_EMERGENCY  <code>class-attribute</code>","text":"<pre><code>LIFEGUARD_MEDICAL_EMERGENCY: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.MINIMUM_FUEL","title":"MINIMUM_FUEL  <code>class-attribute</code>","text":"<pre><code>MINIMUM_FUEL: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.NO_COMMUNICATIONS","title":"NO_COMMUNICATIONS  <code>class-attribute</code>","text":"<pre><code>NO_COMMUNICATIONS: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.UNLAWFUL_INTERFERENCE","title":"UNLAWFUL_INTERFERENCE  <code>class-attribute</code>","text":"<pre><code>UNLAWFUL_INTERFERENCE: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.DOWNED_AIRCRAFT","title":"DOWNED_AIRCRAFT  <code>class-attribute</code>","text":"<pre><code>DOWNED_AIRCRAFT: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EmergencyStatus.RESERVED","title":"RESERVED  <code>class-attribute</code>","text":"<pre><code>RESERVED: EmergencyStatus\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightStage","title":"FlightStage","text":"<p>               Bases: <code>int</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightStage.UNKNOWN","title":"UNKNOWN  <code>class-attribute</code>","text":"<pre><code>UNKNOWN: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightStage.ON_GROUND","title":"ON_GROUND  <code>class-attribute</code>","text":"<pre><code>ON_GROUND: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightStage.TAKING_OFF","title":"TAKING_OFF  <code>class-attribute</code>","text":"<pre><code>TAKING_OFF: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightStage.AIRBORNE","title":"AIRBORNE  <code>class-attribute</code>","text":"<pre><code>AIRBORNE: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightStage.ON_APPROACH","title":"ON_APPROACH  <code>class-attribute</code>","text":"<pre><code>ON_APPROACH: FlightStage\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilter","title":"AirportFilter","text":"<pre><code>AirportFilter(\n    iata: Optional[str] = ...,\n    country_id: Optional[int] = ...,\n    type: Optional[Union[AirportFilterType, str]] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilter.iata","title":"iata  <code>instance-attribute</code>","text":"<pre><code>iata: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilter.country_id","title":"country_id  <code>instance-attribute</code>","text":"<pre><code>country_id: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirportFilter.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: AirportFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirlineFilter","title":"AirlineFilter","text":"<pre><code>AirlineFilter(\n    icao: Optional[str] = ...,\n    type: Optional[Union[AirlineFilterType, str]] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirlineFilter.icao","title":"icao  <code>instance-attribute</code>","text":"<pre><code>icao: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AirlineFilter.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: AirlineFilterType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter","title":"Filter","text":"<pre><code>Filter(\n    altitude_ranges_list: Optional[\n        Iterable[Union[AltitudeRange, Mapping]]\n    ] = ...,\n    speed_ranges_list: Optional[\n        Iterable[Union[SpeedRange, Mapping]]\n    ] = ...,\n    airlines_list: Optional[\n        Iterable[Union[AirlineFilter, Mapping]]\n    ] = ...,\n    callsigns_list: Optional[Iterable[str]] = ...,\n    radars_list: Optional[Iterable[str]] = ...,\n    regs_list: Optional[Iterable[str]] = ...,\n    airports_list: Optional[\n        Iterable[Union[AirportFilter, Mapping]]\n    ] = ...,\n    types_list: Optional[Iterable[str]] = ...,\n    birth_year_ranges_list: Optional[\n        Iterable[Union[BirthYearRange, Mapping]]\n    ] = ...,\n    origins_list: Optional[\n        Iterable[Union[ODFilter, Mapping]]\n    ] = ...,\n    destinations_list: Optional[\n        Iterable[Union[ODFilter, Mapping]]\n    ] = ...,\n    categories_list: Optional[\n        Iterable[Union[Service, str]]\n    ] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.altitude_ranges_list","title":"altitude_ranges_list  <code>instance-attribute</code>","text":"<pre><code>altitude_ranges_list: RepeatedCompositeFieldContainer[\n    AltitudeRange\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.speed_ranges_list","title":"speed_ranges_list  <code>instance-attribute</code>","text":"<pre><code>speed_ranges_list: RepeatedCompositeFieldContainer[\n    SpeedRange\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.airlines_list","title":"airlines_list  <code>instance-attribute</code>","text":"<pre><code>airlines_list: RepeatedCompositeFieldContainer[\n    AirlineFilter\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.callsigns_list","title":"callsigns_list  <code>instance-attribute</code>","text":"<pre><code>callsigns_list: RepeatedScalarFieldContainer[str]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.radars_list","title":"radars_list  <code>instance-attribute</code>","text":"<pre><code>radars_list: RepeatedScalarFieldContainer[str]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.regs_list","title":"regs_list  <code>instance-attribute</code>","text":"<pre><code>regs_list: RepeatedScalarFieldContainer[str]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.airports_list","title":"airports_list  <code>instance-attribute</code>","text":"<pre><code>airports_list: RepeatedCompositeFieldContainer[\n    AirportFilter\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.types_list","title":"types_list  <code>instance-attribute</code>","text":"<pre><code>types_list: RepeatedScalarFieldContainer[str]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.birth_year_ranges_list","title":"birth_year_ranges_list  <code>instance-attribute</code>","text":"<pre><code>birth_year_ranges_list: RepeatedCompositeFieldContainer[\n    BirthYearRange\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.origins_list","title":"origins_list  <code>instance-attribute</code>","text":"<pre><code>origins_list: RepeatedCompositeFieldContainer[ODFilter]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.destinations_list","title":"destinations_list  <code>instance-attribute</code>","text":"<pre><code>destinations_list: RepeatedCompositeFieldContainer[ODFilter]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.categories_list","title":"categories_list  <code>instance-attribute</code>","text":"<pre><code>categories_list: RepeatedScalarFieldContainer[Service]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.AltitudeRange","title":"AltitudeRange","text":"<pre><code>AltitudeRange(\n    min: Optional[int] = ..., max: Optional[int] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.AltitudeRange.min","title":"min  <code>instance-attribute</code>","text":"<pre><code>min: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.AltitudeRange.max","title":"max  <code>instance-attribute</code>","text":"<pre><code>max: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.SpeedRange","title":"SpeedRange","text":"<pre><code>SpeedRange(\n    min: Optional[int] = ..., max: Optional[int] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.SpeedRange.min","title":"min  <code>instance-attribute</code>","text":"<pre><code>min: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.SpeedRange.max","title":"max  <code>instance-attribute</code>","text":"<pre><code>max: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.BirthYearRange","title":"BirthYearRange","text":"<pre><code>BirthYearRange(\n    min: Optional[int] = ..., max: Optional[int] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.BirthYearRange.min","title":"min  <code>instance-attribute</code>","text":"<pre><code>min: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.BirthYearRange.max","title":"max  <code>instance-attribute</code>","text":"<pre><code>max: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.ODFilter","title":"ODFilter","text":"<pre><code>ODFilter(\n    iata: Optional[str] = ...,\n    country_id: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.ODFilter.iata","title":"iata  <code>instance-attribute</code>","text":"<pre><code>iata: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Filter.ODFilter.country_id","title":"country_id  <code>instance-attribute</code>","text":"<pre><code>country_id: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.VisibilitySettings","title":"VisibilitySettings","text":"<pre><code>VisibilitySettings(\n    sources_list: Optional[\n        Iterable[Union[DataSource, str]]\n    ] = ...,\n    services_list: Optional[\n        Iterable[Union[Service, str]]\n    ] = ...,\n    traffic_type: Optional[Union[TrafficType, str]] = ...,\n    only_restricted: bool = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.VisibilitySettings.sources_list","title":"sources_list  <code>instance-attribute</code>","text":"<pre><code>sources_list: RepeatedScalarFieldContainer[DataSource]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.VisibilitySettings.services_list","title":"services_list  <code>instance-attribute</code>","text":"<pre><code>services_list: RepeatedScalarFieldContainer[Service]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.VisibilitySettings.traffic_type","title":"traffic_type  <code>instance-attribute</code>","text":"<pre><code>traffic_type: TrafficType\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.VisibilitySettings.only_restricted","title":"only_restricted  <code>instance-attribute</code>","text":"<pre><code>only_restricted: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LocationBoundaries","title":"LocationBoundaries","text":"<pre><code>LocationBoundaries(\n    north: Optional[float] = ...,\n    south: Optional[float] = ...,\n    west: Optional[float] = ...,\n    east: Optional[float] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LocationBoundaries.north","title":"north  <code>instance-attribute</code>","text":"<pre><code>north: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LocationBoundaries.south","title":"south  <code>instance-attribute</code>","text":"<pre><code>south: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LocationBoundaries.west","title":"west  <code>instance-attribute</code>","text":"<pre><code>west: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LocationBoundaries.east","title":"east  <code>instance-attribute</code>","text":"<pre><code>east: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest","title":"LiveFeedRequest","text":"<pre><code>LiveFeedRequest(\n    bounds: Optional[\n        Union[LocationBoundaries, Mapping]\n    ] = ...,\n    settings: Optional[\n        Union[VisibilitySettings, Mapping]\n    ] = ...,\n    filters_list: Optional[Union[Filter, Mapping]] = ...,\n    fleets_list: Optional[str] = ...,\n    highlight_mode: bool = ...,\n    stats: bool = ...,\n    limit: Optional[int] = ...,\n    maxage: Optional[int] = ...,\n    restriction_mode: Optional[\n        Union[RestrictionVisibility, str]\n    ] = ...,\n    field_mask: Optional[Union[FieldMask, Mapping]] = ...,\n    selected_flight_ids_list: Optional[Iterable[int]] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.bounds","title":"bounds  <code>instance-attribute</code>","text":"<pre><code>bounds: LocationBoundaries\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.settings","title":"settings  <code>instance-attribute</code>","text":"<pre><code>settings: VisibilitySettings\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.filters_list","title":"filters_list  <code>instance-attribute</code>","text":"<pre><code>filters_list: Filter\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.fleets_list","title":"fleets_list  <code>instance-attribute</code>","text":"<pre><code>fleets_list: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.highlight_mode","title":"highlight_mode  <code>instance-attribute</code>","text":"<pre><code>highlight_mode: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.stats","title":"stats  <code>instance-attribute</code>","text":"<pre><code>stats: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.maxage","title":"maxage  <code>instance-attribute</code>","text":"<pre><code>maxage: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.restriction_mode","title":"restriction_mode  <code>instance-attribute</code>","text":"<pre><code>restriction_mode: RestrictionVisibility\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.field_mask","title":"field_mask  <code>instance-attribute</code>","text":"<pre><code>field_mask: FieldMask\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.selected_flight_ids_list","title":"selected_flight_ids_list  <code>instance-attribute</code>","text":"<pre><code>selected_flight_ids_list: RepeatedScalarFieldContainer[int]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.FieldMask","title":"FieldMask","text":"<pre><code>FieldMask(field_name: Optional[Iterable[str]] = ...)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedRequest.FieldMask.field_name","title":"field_name  <code>instance-attribute</code>","text":"<pre><code>field_name: RepeatedScalarFieldContainer[str]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo","title":"EMSInfo","text":"<pre><code>EMSInfo(\n    qnh: Optional[int] = ...,\n    amcp: Optional[int] = ...,\n    afms: Optional[int] = ...,\n    oat: Optional[int] = ...,\n    ias: Optional[int] = ...,\n    tas: Optional[int] = ...,\n    mach: Optional[int] = ...,\n    agps: Optional[int] = ...,\n    agpsdiff: Optional[int] = ...,\n    apflags: Optional[int] = ...,\n    wind_dir: Optional[int] = ...,\n    wind_speed: Optional[int] = ...,\n    rs: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.qnh","title":"qnh  <code>instance-attribute</code>","text":"<pre><code>qnh: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.amcp","title":"amcp  <code>instance-attribute</code>","text":"<pre><code>amcp: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.afms","title":"afms  <code>instance-attribute</code>","text":"<pre><code>afms: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.oat","title":"oat  <code>instance-attribute</code>","text":"<pre><code>oat: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.ias","title":"ias  <code>instance-attribute</code>","text":"<pre><code>ias: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.tas","title":"tas  <code>instance-attribute</code>","text":"<pre><code>tas: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.mach","title":"mach  <code>instance-attribute</code>","text":"<pre><code>mach: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.agps","title":"agps  <code>instance-attribute</code>","text":"<pre><code>agps: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.agpsdiff","title":"agpsdiff  <code>instance-attribute</code>","text":"<pre><code>agpsdiff: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.apflags","title":"apflags  <code>instance-attribute</code>","text":"<pre><code>apflags: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.wind_dir","title":"wind_dir  <code>instance-attribute</code>","text":"<pre><code>wind_dir: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.wind_speed","title":"wind_speed  <code>instance-attribute</code>","text":"<pre><code>wind_speed: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSInfo.rs","title":"rs  <code>instance-attribute</code>","text":"<pre><code>rs: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability","title":"EMSAvailability","text":"<pre><code>EMSAvailability(\n    qnh_availability: bool = ...,\n    amcp_availability: bool = ...,\n    afms_availability: bool = ...,\n    oat_availability: bool = ...,\n    ias_availability: bool = ...,\n    tas_availability: bool = ...,\n    mach_availability: bool = ...,\n    agps_availability: bool = ...,\n    agpsdiff_availability: bool = ...,\n    apflags_availability: bool = ...,\n    wind_dir_availability: bool = ...,\n    wind_speed_availability: bool = ...,\n    rs_availability: bool = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.qnh_availability","title":"qnh_availability  <code>instance-attribute</code>","text":"<pre><code>qnh_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.amcp_availability","title":"amcp_availability  <code>instance-attribute</code>","text":"<pre><code>amcp_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.afms_availability","title":"afms_availability  <code>instance-attribute</code>","text":"<pre><code>afms_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.oat_availability","title":"oat_availability  <code>instance-attribute</code>","text":"<pre><code>oat_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.ias_availability","title":"ias_availability  <code>instance-attribute</code>","text":"<pre><code>ias_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.tas_availability","title":"tas_availability  <code>instance-attribute</code>","text":"<pre><code>tas_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.mach_availability","title":"mach_availability  <code>instance-attribute</code>","text":"<pre><code>mach_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.agps_availability","title":"agps_availability  <code>instance-attribute</code>","text":"<pre><code>agps_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.agpsdiff_availability","title":"agpsdiff_availability  <code>instance-attribute</code>","text":"<pre><code>agpsdiff_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.apflags_availability","title":"apflags_availability  <code>instance-attribute</code>","text":"<pre><code>apflags_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.wind_dir_availability","title":"wind_dir_availability  <code>instance-attribute</code>","text":"<pre><code>wind_dir_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.wind_speed_availability","title":"wind_speed_availability  <code>instance-attribute</code>","text":"<pre><code>wind_speed_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.EMSAvailability.rs_availability","title":"rs_availability  <code>instance-attribute</code>","text":"<pre><code>rs_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Schedule","title":"Schedule","text":"<pre><code>Schedule(\n    std: Optional[int] = ...,\n    etd: Optional[int] = ...,\n    atd: Optional[int] = ...,\n    sta: Optional[int] = ...,\n    eta: Optional[int] = ...,\n    ata: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Schedule.std","title":"std  <code>instance-attribute</code>","text":"<pre><code>std: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Schedule.etd","title":"etd  <code>instance-attribute</code>","text":"<pre><code>etd: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Schedule.atd","title":"atd  <code>instance-attribute</code>","text":"<pre><code>atd: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Schedule.sta","title":"sta  <code>instance-attribute</code>","text":"<pre><code>sta: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Schedule.eta","title":"eta  <code>instance-attribute</code>","text":"<pre><code>eta: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Schedule.ata","title":"ata  <code>instance-attribute</code>","text":"<pre><code>ata: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo","title":"ExtraFlightInfo","text":"<pre><code>ExtraFlightInfo(\n    flight: Optional[str] = ...,\n    reg: Optional[str] = ...,\n    route: Optional[Union[Route, Mapping]] = ...,\n    type: Optional[str] = ...,\n    squawk: Optional[int] = ...,\n    vspeed: Optional[int] = ...,\n    age: Optional[str] = ...,\n    country_of_reg: Optional[int] = ...,\n    schedule: Optional[Union[Schedule, Mapping]] = ...,\n    logo_id: Optional[int] = ...,\n    airspace: Optional[int] = ...,\n    ems_info: Optional[Union[EMSInfo, Mapping]] = ...,\n    ems_availability: Optional[\n        Union[EMSAvailability, Mapping]\n    ] = ...,\n    icao_address: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.flight","title":"flight  <code>instance-attribute</code>","text":"<pre><code>flight: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.reg","title":"reg  <code>instance-attribute</code>","text":"<pre><code>reg: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.route","title":"route  <code>instance-attribute</code>","text":"<pre><code>route: Route\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.squawk","title":"squawk  <code>instance-attribute</code>","text":"<pre><code>squawk: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.vspeed","title":"vspeed  <code>instance-attribute</code>","text":"<pre><code>vspeed: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.age","title":"age  <code>instance-attribute</code>","text":"<pre><code>age: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.country_of_reg","title":"country_of_reg  <code>instance-attribute</code>","text":"<pre><code>country_of_reg: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.schedule","title":"schedule  <code>instance-attribute</code>","text":"<pre><code>schedule: Schedule\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.logo_id","title":"logo_id  <code>instance-attribute</code>","text":"<pre><code>logo_id: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.airspace","title":"airspace  <code>instance-attribute</code>","text":"<pre><code>airspace: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.ems_info","title":"ems_info  <code>instance-attribute</code>","text":"<pre><code>ems_info: EMSInfo\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.ems_availability","title":"ems_availability  <code>instance-attribute</code>","text":"<pre><code>ems_availability: EMSAvailability\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.icao_address","title":"icao_address  <code>instance-attribute</code>","text":"<pre><code>icao_address: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.Route","title":"Route","text":"<pre><code>Route(from_: Optional[str] = ..., to: Optional[str] = ...)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.Route.from_","title":"from_  <code>instance-attribute</code>","text":"<pre><code>from_: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtraFlightInfo.Route.to","title":"to  <code>instance-attribute</code>","text":"<pre><code>to: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SourceStats","title":"SourceStats","text":"<pre><code>SourceStats(\n    source: Optional[Union[DataSource, str]] = ...,\n    count: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SourceStats.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.SourceStats.count","title":"count  <code>instance-attribute</code>","text":"<pre><code>count: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Stats","title":"Stats","text":"<pre><code>Stats(\n    sources: Optional[\n        Iterable[Union[SourceStats, Mapping]]\n    ] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Stats.sources","title":"sources  <code>instance-attribute</code>","text":"<pre><code>sources: RepeatedCompositeFieldContainer[SourceStats]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight","title":"Flight","text":"<pre><code>Flight(\n    flightid: Optional[int] = ...,\n    lat: Optional[float] = ...,\n    lon: Optional[float] = ...,\n    track: Optional[int] = ...,\n    alt: Optional[int] = ...,\n    speed: Optional[int] = ...,\n    icon: Optional[Union[Icon, str]] = ...,\n    status: Optional[Union[Status, str]] = ...,\n    timestamp: Optional[int] = ...,\n    on_ground: bool = ...,\n    callsign: Optional[str] = ...,\n    source: Optional[Union[DataSource, str]] = ...,\n    extra_info: Optional[\n        Union[ExtraFlightInfo, Mapping]\n    ] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.flightid","title":"flightid  <code>instance-attribute</code>","text":"<pre><code>flightid: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.track","title":"track  <code>instance-attribute</code>","text":"<pre><code>track: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.alt","title":"alt  <code>instance-attribute</code>","text":"<pre><code>alt: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.speed","title":"speed  <code>instance-attribute</code>","text":"<pre><code>speed: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.icon","title":"icon  <code>instance-attribute</code>","text":"<pre><code>icon: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: Status\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.on_ground","title":"on_ground  <code>instance-attribute</code>","text":"<pre><code>on_ground: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: DataSource\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Flight.extra_info","title":"extra_info  <code>instance-attribute</code>","text":"<pre><code>extra_info: ExtraFlightInfo\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedResponse","title":"LiveFeedResponse","text":"<pre><code>LiveFeedResponse(\n    flights_list: Optional[\n        Iterable[Union[Flight, Mapping]]\n    ] = ...,\n    stats: Optional[Union[Stats, Mapping]] = ...,\n    selected_flight_info: Optional[\n        Iterable[Union[Flight, Mapping]]\n    ] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedResponse.flights_list","title":"flights_list  <code>instance-attribute</code>","text":"<pre><code>flights_list: RepeatedCompositeFieldContainer[Flight]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedResponse.stats","title":"stats  <code>instance-attribute</code>","text":"<pre><code>stats: Stats\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFeedResponse.selected_flight_info","title":"selected_flight_info  <code>instance-attribute</code>","text":"<pre><code>selected_flight_info: RepeatedCompositeFieldContainer[\n    Flight\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PlaybackRequest","title":"PlaybackRequest","text":"<pre><code>PlaybackRequest(\n    live_feed_request: Optional[\n        Union[LiveFeedRequest, Mapping]\n    ] = ...,\n    timestamp: Optional[int] = ...,\n    prefetch: Optional[int] = ...,\n    hfreq: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PlaybackRequest.live_feed_request","title":"live_feed_request  <code>instance-attribute</code>","text":"<pre><code>live_feed_request: LiveFeedRequest\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PlaybackRequest.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PlaybackRequest.prefetch","title":"prefetch  <code>instance-attribute</code>","text":"<pre><code>prefetch: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PlaybackRequest.hfreq","title":"hfreq  <code>instance-attribute</code>","text":"<pre><code>hfreq: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PlaybackResponse","title":"PlaybackResponse","text":"<pre><code>PlaybackResponse(\n    live_feed_response: Optional[\n        Union[LiveFeedResponse, Mapping]\n    ] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.PlaybackResponse.live_feed_response","title":"live_feed_response  <code>instance-attribute</code>","text":"<pre><code>live_feed_response: LiveFeedResponse\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo","title":"AircraftInfo","text":"<pre><code>AircraftInfo(\n    icao_address: Optional[int] = ...,\n    reg: Optional[int] = ...,\n    country_of_reg: Optional[int] = ...,\n    type: Optional[str] = ...,\n    icon: Optional[Union[Icon, str]] = ...,\n    full_description: Optional[str] = ...,\n    msn: Optional[str] = ...,\n    service: Optional[Union[Service, str]] = ...,\n    ac_birth_date: Optional[str] = ...,\n    ac_age_text: Optional[str] = ...,\n    images_list: Optional[\n        Iterable[Union[ImageInfo, Mapping]]\n    ] = ...,\n    is_test_flight: bool = ...,\n    msn_available: bool = ...,\n    age_available: bool = ...,\n    registered_owners: Optional[str] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.icao_address","title":"icao_address  <code>instance-attribute</code>","text":"<pre><code>icao_address: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.reg","title":"reg  <code>instance-attribute</code>","text":"<pre><code>reg: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.country_of_reg","title":"country_of_reg  <code>instance-attribute</code>","text":"<pre><code>country_of_reg: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.icon","title":"icon  <code>instance-attribute</code>","text":"<pre><code>icon: Icon\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.full_description","title":"full_description  <code>instance-attribute</code>","text":"<pre><code>full_description: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.msn","title":"msn  <code>instance-attribute</code>","text":"<pre><code>msn: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.service","title":"service  <code>instance-attribute</code>","text":"<pre><code>service: Service\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.ac_birth_date","title":"ac_birth_date  <code>instance-attribute</code>","text":"<pre><code>ac_birth_date: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.ac_age_text","title":"ac_age_text  <code>instance-attribute</code>","text":"<pre><code>ac_age_text: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.images_list","title":"images_list  <code>instance-attribute</code>","text":"<pre><code>images_list: RepeatedCompositeFieldContainer[ImageInfo]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.is_test_flight","title":"is_test_flight  <code>instance-attribute</code>","text":"<pre><code>is_test_flight: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.msn_available","title":"msn_available  <code>instance-attribute</code>","text":"<pre><code>msn_available: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.age_available","title":"age_available  <code>instance-attribute</code>","text":"<pre><code>age_available: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AircraftInfo.registered_owners","title":"registered_owners  <code>instance-attribute</code>","text":"<pre><code>registered_owners: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AltArrival","title":"AltArrival","text":"<pre><code>AltArrival(\n    arrival: Optional[Union[Fix, Mapping]] = ...,\n    length: Optional[float] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AltArrival.arrival","title":"arrival  <code>instance-attribute</code>","text":"<pre><code>arrival: Fix\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.AltArrival.length","title":"length  <code>instance-attribute</code>","text":"<pre><code>length: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Coordinate","title":"Coordinate","text":"<pre><code>Coordinate(\n    code: Optional[str] = ...,\n    point: Optional[Union[Point, Mapping]] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Coordinate.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Coordinate.point","title":"point  <code>instance-attribute</code>","text":"<pre><code>point: Point\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Duration","title":"Duration","text":"<pre><code>Duration(count: Optional[int] = ...)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Duration.count","title":"count  <code>instance-attribute</code>","text":"<pre><code>count: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtendedFlightInfo","title":"ExtendedFlightInfo","text":"<pre><code>ExtendedFlightInfo(\n    timestamp: Optional[int] = ...,\n    on_ground: bool = ...,\n    callsign: Optional[str] = ...,\n    vspeed_availability: bool = ...,\n    vspeed: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtendedFlightInfo.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtendedFlightInfo.on_ground","title":"on_ground  <code>instance-attribute</code>","text":"<pre><code>on_ground: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtendedFlightInfo.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtendedFlightInfo.vspeed_availability","title":"vspeed_availability  <code>instance-attribute</code>","text":"<pre><code>vspeed_availability: bool\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ExtendedFlightInfo.vspeed","title":"vspeed  <code>instance-attribute</code>","text":"<pre><code>vspeed: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FetchSearchIndexRequest","title":"FetchSearchIndexRequest","text":"<pre><code>FetchSearchIndexRequest()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FetchSearchIndexResponse","title":"FetchSearchIndexResponse","text":"<pre><code>FetchSearchIndexResponse()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Fix","title":"Fix","text":"<pre><code>Fix(coordinate: Optional[Union[Coordinate, Mapping]] = ...)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Fix.coordinate","title":"coordinate  <code>instance-attribute</code>","text":"<pre><code>coordinate: Coordinate\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightPlan","title":"FlightPlan","text":"<pre><code>FlightPlan()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightProgress","title":"FlightProgress","text":"<pre><code>FlightProgress()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FlightSearchData","title":"FlightSearchData","text":"<pre><code>FlightSearchData()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightRequest","title":"FollowFlightRequest","text":"<pre><code>FollowFlightRequest()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightResponse","title":"FollowFlightResponse","text":"<pre><code>FollowFlightResponse(\n    aircraft_info: Optional[\n        Union[AircraftInfo, Mapping]\n    ] = ...,\n    flight_plan: Optional[Union[FlightPlan, Mapping]] = ...,\n    schedule_info: Optional[\n        Union[ScheduleInfo, Mapping]\n    ] = ...,\n    flight_progress: Optional[\n        Union[FlightProgress, Mapping]\n    ] = ...,\n    flight_info: Optional[\n        Union[ExtendedFlightInfo, Mapping]\n    ] = ...,\n    flight_trail_list: Optional[\n        Iterable[Union[TrailPoint, Mapping]]\n    ] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightResponse.aircraft_info","title":"aircraft_info  <code>instance-attribute</code>","text":"<pre><code>aircraft_info: AircraftInfo\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightResponse.flight_plan","title":"flight_plan  <code>instance-attribute</code>","text":"<pre><code>flight_plan: FlightPlan\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightResponse.schedule_info","title":"schedule_info  <code>instance-attribute</code>","text":"<pre><code>schedule_info: ScheduleInfo\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightResponse.flight_progress","title":"flight_progress  <code>instance-attribute</code>","text":"<pre><code>flight_progress: FlightProgress\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightResponse.flight_info","title":"flight_info  <code>instance-attribute</code>","text":"<pre><code>flight_info: ExtendedFlightInfo\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowFlightResponse.flight_trail_list","title":"flight_trail_list  <code>instance-attribute</code>","text":"<pre><code>flight_trail_list: RepeatedCompositeFieldContainer[\n    TrailPoint\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight","title":"FollowedFlight","text":"<pre><code>FollowedFlight(\n    flight_number: Optional[str] = ...,\n    callsign: Optional[str] = ...,\n    from_iata: Optional[str] = ...,\n    from_city: Optional[str] = ...,\n    to_iata: Optional[str] = ...,\n    to_city: Optional[str] = ...,\n    type: Optional[str] = ...,\n    full_description: Optional[str] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.flight_number","title":"flight_number  <code>instance-attribute</code>","text":"<pre><code>flight_number: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.from_iata","title":"from_iata  <code>instance-attribute</code>","text":"<pre><code>from_iata: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.from_city","title":"from_city  <code>instance-attribute</code>","text":"<pre><code>from_city: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.to_iata","title":"to_iata  <code>instance-attribute</code>","text":"<pre><code>to_iata: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.to_city","title":"to_city  <code>instance-attribute</code>","text":"<pre><code>to_city: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.FollowedFlight.full_description","title":"full_description  <code>instance-attribute</code>","text":"<pre><code>full_description: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Geolocation","title":"Geolocation","text":"<pre><code>Geolocation(\n    lat: Optional[float] = ..., lon: Optional[float] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Geolocation.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Geolocation.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ImageInfo","title":"ImageInfo","text":"<pre><code>ImageInfo(\n    url: Optional[str] = ...,\n    copyright: Optional[str] = ...,\n    thumbnail: Optional[str] = ...,\n    medium: Optional[str] = ...,\n    large: Optional[str] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ImageInfo.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ImageInfo.copyright","title":"copyright  <code>instance-attribute</code>","text":"<pre><code>copyright: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ImageInfo.thumbnail","title":"thumbnail  <code>instance-attribute</code>","text":"<pre><code>thumbnail: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ImageInfo.medium","title":"medium  <code>instance-attribute</code>","text":"<pre><code>medium: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ImageInfo.large","title":"large  <code>instance-attribute</code>","text":"<pre><code>large: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Interval","title":"Interval","text":"<pre><code>Interval(\n    min: Optional[int] = ..., max: Optional[int] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Interval.min","title":"min  <code>instance-attribute</code>","text":"<pre><code>min: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Interval.max","title":"max  <code>instance-attribute</code>","text":"<pre><code>max: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFlightStatusData","title":"LiveFlightStatusData","text":"<pre><code>LiveFlightStatusData(\n    lat: Optional[float] = ...,\n    lon: Optional[float] = ...,\n    squawk: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFlightStatusData.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFlightStatusData.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: float\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFlightStatusData.squawk","title":"squawk  <code>instance-attribute</code>","text":"<pre><code>squawk: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFlightsStatusRequest","title":"LiveFlightsStatusRequest","text":"<pre><code>LiveFlightsStatusRequest()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFlightsStatusResponse","title":"LiveFlightsStatusResponse","text":"<pre><code>LiveFlightsStatusResponse(\n    flights_map: Optional[\n        Union[LiveFlightStatusData, Mapping]\n    ] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveFlightsStatusResponse.flights_map","title":"flights_map  <code>instance-attribute</code>","text":"<pre><code>flights_map: LiveFlightStatusData\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveTrailRequest","title":"LiveTrailRequest","text":"<pre><code>LiveTrailRequest()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveTrailResponse","title":"LiveTrailResponse","text":"<pre><code>LiveTrailResponse(\n    radar_records_list: Optional[\n        Iterable[Union[RadarHistoryRecord, Mapping]]\n    ] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.LiveTrailResponse.radar_records_list","title":"radar_records_list  <code>instance-attribute</code>","text":"<pre><code>radar_records_list: RepeatedCompositeFieldContainer[\n    RadarHistoryRecord\n]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NearbyFlight","title":"NearbyFlight","text":"<pre><code>NearbyFlight(\n    flight: Optional[Union[Flight, Mapping]] = ...,\n    distance: Optional[int] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NearbyFlight.flight","title":"flight  <code>instance-attribute</code>","text":"<pre><code>flight: Flight\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NearbyFlight.distance","title":"distance  <code>instance-attribute</code>","text":"<pre><code>distance: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NearestFlightsRequest","title":"NearestFlightsRequest","text":"<pre><code>NearestFlightsRequest(radius: Optional[int] = ...)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NearestFlightsRequest.radius","title":"radius  <code>instance-attribute</code>","text":"<pre><code>radius: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NearestFlightsResponse","title":"NearestFlightsResponse","text":"<pre><code>NearestFlightsResponse(\n    flights_list: Optional[\n        Iterable[Union[NearbyFlight, Mapping]]\n    ] = ...\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.NearestFlightsResponse.flights_list","title":"flights_list  <code>instance-attribute</code>","text":"<pre><code>flights_list: RepeatedCompositeFieldContainer[NearbyFlight]\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Point","title":"Point","text":"<pre><code>Point()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Ping","title":"Ping","text":"<pre><code>Ping()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Pong","title":"Pong","text":"<pre><code>Pong()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RadarHistoryRecord","title":"RadarHistoryRecord","text":"<pre><code>RadarHistoryRecord(timestamp: Optional[int] = ...)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.RadarHistoryRecord.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Route","title":"Route","text":"<pre><code>Route()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo","title":"ScheduleInfo","text":"<pre><code>ScheduleInfo(\n    flight_number: Optional[str] = ...,\n    operated_by_id: Optional[int] = ...,\n    scheduled_departure: Optional[int] = ...,\n    scheduled_arrival: Optional[int] = ...,\n    actual_arrival: Optional[int] = ...,\n    arr_terminal: Optional[str] = ...,\n    arr_gate: Optional[str] = ...,\n    baggage_belt: Optional[str] = ...,\n)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.flight_number","title":"flight_number  <code>instance-attribute</code>","text":"<pre><code>flight_number: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.operated_by_id","title":"operated_by_id  <code>instance-attribute</code>","text":"<pre><code>operated_by_id: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.scheduled_departure","title":"scheduled_departure  <code>instance-attribute</code>","text":"<pre><code>scheduled_departure: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.scheduled_arrival","title":"scheduled_arrival  <code>instance-attribute</code>","text":"<pre><code>scheduled_arrival: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.actual_arrival","title":"actual_arrival  <code>instance-attribute</code>","text":"<pre><code>actual_arrival: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.arr_terminal","title":"arr_terminal  <code>instance-attribute</code>","text":"<pre><code>arr_terminal: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.arr_gate","title":"arr_gate  <code>instance-attribute</code>","text":"<pre><code>arr_gate: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.ScheduleInfo.baggage_belt","title":"baggage_belt  <code>instance-attribute</code>","text":"<pre><code>baggage_belt: str\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.Tick","title":"Tick","text":"<pre><code>Tick()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TopFlightsRequest","title":"TopFlightsRequest","text":"<pre><code>TopFlightsRequest(limit: Optional[int] = ...)\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TopFlightsRequest.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit: int\n</code></pre>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TopFlightsResponse","title":"TopFlightsResponse","text":"<pre><code>TopFlightsResponse()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/protobuf/#fr24.proto.request_pb2.TrailPoint","title":"TrailPoint","text":"<pre><code>TrailPoint()\n</code></pre> <p>               Bases: <code>Message</code></p>"},{"location":"api/types/","title":"Types","text":""},{"location":"api/types/#fr24.types","title":"types","text":""},{"location":"api/types/#fr24.types.cache","title":"cache","text":""},{"location":"api/types/#fr24.types.cache.flight_list_schema","title":"flight_list_schema  <code>module-attribute</code>","text":"<pre><code>flight_list_schema = schema(\n    [\n        field(\"flight_id\", uint64()),\n        field(\"number\", string()),\n        field(\"callsign\", string()),\n        field(\"icao24\", uint32()),\n        field(\"registration\", string()),\n        field(\"typecode\", string()),\n        field(\"origin\", string()),\n        field(\"destination\", string()),\n        field(\"status\", string()),\n        field(\"STOD\", timestamp(\"ms\", tz=\"UTC\")),\n        field(\"ETOD\", timestamp(\"ms\", tz=\"UTC\")),\n        field(\"ATOD\", timestamp(\"ms\", tz=\"UTC\")),\n        field(\"STOA\", timestamp(\"ms\", tz=\"UTC\")),\n        field(\"ETOA\", timestamp(\"ms\", tz=\"UTC\")),\n        field(\"ATOA\", timestamp(\"ms\", tz=\"UTC\")),\n    ]\n)\n</code></pre>"},{"location":"api/types/#fr24.types.cache.playback_track_schema","title":"playback_track_schema  <code>module-attribute</code>","text":"<pre><code>playback_track_schema = schema(\n    [\n        field(\"timestamp\", uint32()),\n        field(\"latitude\", float32()),\n        field(\"longitude\", float32()),\n        field(\"altitude\", int32()),\n        field(\"ground_speed\", int16()),\n        field(\"vertical_speed\", int16()),\n        field(\"track\", int16()),\n        field(\"squawk\", uint16()),\n        field(\n            \"ems\",\n            struct(\n                [\n                    field(\"timestamp\", uint32()),\n                    field(\"ias\", int16()),\n                    field(\"tas\", int16()),\n                    field(\"mach\", int16()),\n                    field(\"mcp\", int32()),\n                    field(\"fms\", int32()),\n                    field(\"autopilot\", int8()),\n                    field(\"oat\", int8()),\n                    field(\"track\", float32()),\n                    field(\"roll\", float32()),\n                    field(\"qnh\", uint16()),\n                    field(\"wind_dir\", int16()),\n                    field(\"wind_speed\", int16()),\n                    field(\"precision\", uint8()),\n                    field(\"altitude_gps\", int32()),\n                    field(\"emergency\", uint8()),\n                    field(\"tcas_acas\", uint8()),\n                    field(\"heading\", uint16()),\n                ]\n            ),\n        ),\n    ]\n)\n</code></pre>"},{"location":"api/types/#fr24.types.cache.livefeed_schema","title":"livefeed_schema  <code>module-attribute</code>","text":"<pre><code>livefeed_schema = schema(\n    [\n        field(\"timestamp\", uint32()),\n        field(\"flightid\", uint32()),\n        field(\"latitude\", float32()),\n        field(\"longitude\", float32()),\n        field(\"track\", uint16()),\n        field(\"altitude\", int32()),\n        field(\"ground_speed\", int16()),\n        field(\"on_ground\", bool_()),\n        field(\"callsign\", string()),\n        field(\"source\", uint8()),\n        field(\"registration\", string()),\n        field(\"origin\", string()),\n        field(\"destination\", string()),\n        field(\"typecode\", string()),\n        field(\"eta\", uint32()),\n        field(\"vertical_speed\", int16()),\n        field(\"squawk\", uint16()),\n    ]\n)\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord","title":"FlightListRecord","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.flight_id","title":"flight_id  <code>instance-attribute</code>","text":"<pre><code>flight_id: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.number","title":"number  <code>instance-attribute</code>","text":"<pre><code>number: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.icao24","title":"icao24  <code>instance-attribute</code>","text":"<pre><code>icao24: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.registration","title":"registration  <code>instance-attribute</code>","text":"<pre><code>registration: str | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.typecode","title":"typecode  <code>instance-attribute</code>","text":"<pre><code>typecode: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: str | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.destination","title":"destination  <code>instance-attribute</code>","text":"<pre><code>destination: str | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.STOD","title":"STOD  <code>instance-attribute</code>","text":"<pre><code>STOD: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.ETOD","title":"ETOD  <code>instance-attribute</code>","text":"<pre><code>ETOD: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.ATOD","title":"ATOD  <code>instance-attribute</code>","text":"<pre><code>ATOD: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.STOA","title":"STOA  <code>instance-attribute</code>","text":"<pre><code>STOA: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.ETOA","title":"ETOA  <code>instance-attribute</code>","text":"<pre><code>ETOA: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.FlightListRecord.ATOA","title":"ATOA  <code>instance-attribute</code>","text":"<pre><code>ATOA: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord","title":"PlaybackTrackRecord","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.latitude","title":"latitude  <code>instance-attribute</code>","text":"<pre><code>latitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.longitude","title":"longitude  <code>instance-attribute</code>","text":"<pre><code>longitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.altitude","title":"altitude  <code>instance-attribute</code>","text":"<pre><code>altitude: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.ground_speed","title":"ground_speed  <code>instance-attribute</code>","text":"<pre><code>ground_speed: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.vertical_speed","title":"vertical_speed  <code>instance-attribute</code>","text":"<pre><code>vertical_speed: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.track","title":"track  <code>instance-attribute</code>","text":"<pre><code>track: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackRecord.squawk","title":"squawk  <code>instance-attribute</code>","text":"<pre><code>squawk: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord","title":"PlaybackTrackEMSRecord","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.ias","title":"ias  <code>instance-attribute</code>","text":"<pre><code>ias: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.tas","title":"tas  <code>instance-attribute</code>","text":"<pre><code>tas: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.mach","title":"mach  <code>instance-attribute</code>","text":"<pre><code>mach: float | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.mcp","title":"mcp  <code>instance-attribute</code>","text":"<pre><code>mcp: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.fms","title":"fms  <code>instance-attribute</code>","text":"<pre><code>fms: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.autopilot","title":"autopilot  <code>instance-attribute</code>","text":"<pre><code>autopilot: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.oat","title":"oat  <code>instance-attribute</code>","text":"<pre><code>oat: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.track","title":"track  <code>instance-attribute</code>","text":"<pre><code>track: float | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.roll","title":"roll  <code>instance-attribute</code>","text":"<pre><code>roll: float | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.qnh","title":"qnh  <code>instance-attribute</code>","text":"<pre><code>qnh: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.wind_dir","title":"wind_dir  <code>instance-attribute</code>","text":"<pre><code>wind_dir: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.wind_speed","title":"wind_speed  <code>instance-attribute</code>","text":"<pre><code>wind_speed: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.precision","title":"precision  <code>instance-attribute</code>","text":"<pre><code>precision: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.altitude_gps","title":"altitude_gps  <code>instance-attribute</code>","text":"<pre><code>altitude_gps: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.emergency","title":"emergency  <code>instance-attribute</code>","text":"<pre><code>emergency: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.tcas_acas","title":"tcas_acas  <code>instance-attribute</code>","text":"<pre><code>tcas_acas: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.PlaybackTrackEMSRecord.heading","title":"heading  <code>instance-attribute</code>","text":"<pre><code>heading: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord","title":"LiveFeedRecord","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.flightid","title":"flightid  <code>instance-attribute</code>","text":"<pre><code>flightid: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.latitude","title":"latitude  <code>instance-attribute</code>","text":"<pre><code>latitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.longitude","title":"longitude  <code>instance-attribute</code>","text":"<pre><code>longitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.track","title":"track  <code>instance-attribute</code>","text":"<pre><code>track: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.altitude","title":"altitude  <code>instance-attribute</code>","text":"<pre><code>altitude: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.ground_speed","title":"ground_speed  <code>instance-attribute</code>","text":"<pre><code>ground_speed: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.vertical_speed","title":"vertical_speed  <code>instance-attribute</code>","text":"<pre><code>vertical_speed: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.on_ground","title":"on_ground  <code>instance-attribute</code>","text":"<pre><code>on_ground: bool\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.registration","title":"registration  <code>instance-attribute</code>","text":"<pre><code>registration: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.destination","title":"destination  <code>instance-attribute</code>","text":"<pre><code>destination: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.typecode","title":"typecode  <code>instance-attribute</code>","text":"<pre><code>typecode: str\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.eta","title":"eta  <code>instance-attribute</code>","text":"<pre><code>eta: int\n</code></pre>"},{"location":"api/types/#fr24.types.cache.LiveFeedRecord.squawk","title":"squawk  <code>instance-attribute</code>","text":"<pre><code>squawk: int\n</code></pre>"},{"location":"api/types/#fr24.types.core","title":"core","text":""},{"location":"api/types/#fr24.types.core.FlightListContext","title":"FlightListContext","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.core.FlightListContext.ident","title":"ident  <code>instance-attribute</code>","text":"<pre><code>ident: str\n</code></pre>"},{"location":"api/types/#fr24.types.core.FlightListContext.kind","title":"kind  <code>instance-attribute</code>","text":"<pre><code>kind: Literal['reg', 'flight']\n</code></pre>"},{"location":"api/types/#fr24.types.core.FlightListContext.base_dir","title":"base_dir  <code>instance-attribute</code>","text":"<pre><code>base_dir: NotRequired[Path]\n</code></pre>"},{"location":"api/types/#fr24.types.core.PlaybackContext","title":"PlaybackContext","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.core.PlaybackContext.flight_id","title":"flight_id  <code>instance-attribute</code>","text":"<pre><code>flight_id: str\n</code></pre>"},{"location":"api/types/#fr24.types.core.PlaybackContext.base_dir","title":"base_dir  <code>instance-attribute</code>","text":"<pre><code>base_dir: NotRequired[Path]\n</code></pre>"},{"location":"api/types/#fr24.types.core.LiveFeedContext","title":"LiveFeedContext","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.core.LiveFeedContext.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.core.LiveFeedContext.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: Literal['live', 'playback']\n</code></pre>"},{"location":"api/types/#fr24.types.core.LiveFeedContext.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: NotRequired[int | None]\n</code></pre>"},{"location":"api/types/#fr24.types.core.LiveFeedContext.hfreq","title":"hfreq  <code>instance-attribute</code>","text":"<pre><code>hfreq: NotRequired[int | None]\n</code></pre>"},{"location":"api/types/#fr24.types.core.LiveFeedContext.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit: NotRequired[int | None]\n</code></pre>"},{"location":"api/types/#fr24.types.core.LiveFeedContext.fields","title":"fields  <code>instance-attribute</code>","text":"<pre><code>fields: NotRequired[list[LivefeedField] | None]\n</code></pre>"},{"location":"api/types/#fr24.types.core.LiveFeedContext.base_dir","title":"base_dir  <code>instance-attribute</code>","text":"<pre><code>base_dir: NotRequired[Path]\n</code></pre>"},{"location":"api/types/#fr24.types.find","title":"find","text":""},{"location":"api/types/#fr24.types.find.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar(\n    \"T\", Airport, Operator, Live, Schedule, Aircraft\n)\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live","title":"Live","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.Live.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: float\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: float\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.schd_from","title":"schd_from  <code>instance-attribute</code>","text":"<pre><code>schd_from: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.schd_to","title":"schd_to  <code>instance-attribute</code>","text":"<pre><code>schd_to: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.ac_type","title":"ac_type  <code>instance-attribute</code>","text":"<pre><code>ac_type: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.route","title":"route  <code>instance-attribute</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.logo","title":"logo  <code>instance-attribute</code>","text":"<pre><code>logo: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.reg","title":"reg  <code>instance-attribute</code>","text":"<pre><code>reg: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.flight","title":"flight  <code>instance-attribute</code>","text":"<pre><code>flight: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Live.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Airport","title":"Airport","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.Airport.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: float\n</code></pre>"},{"location":"api/types/#fr24.types.find.Airport.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: float\n</code></pre>"},{"location":"api/types/#fr24.types.find.Airport.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size: float\n</code></pre>"},{"location":"api/types/#fr24.types.find.Operator","title":"Operator","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.Operator.operator_id","title":"operator_id  <code>instance-attribute</code>","text":"<pre><code>operator_id: int\n</code></pre>"},{"location":"api/types/#fr24.types.find.Operator.iata","title":"iata  <code>instance-attribute</code>","text":"<pre><code>iata: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Operator.logo","title":"logo  <code>instance-attribute</code>","text":"<pre><code>logo: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Schedule","title":"Schedule","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.Schedule.logo","title":"logo  <code>instance-attribute</code>","text":"<pre><code>logo: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Schedule.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Schedule.flight","title":"flight  <code>instance-attribute</code>","text":"<pre><code>flight: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Schedule.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Aircraft","title":"Aircraft","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.Aircraft.equip","title":"equip  <code>instance-attribute</code>","text":"<pre><code>equip: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Aircraft.hex","title":"hex  <code>instance-attribute</code>","text":"<pre><code>hex: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Entry","title":"Entry","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.Entry.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Entry.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.Entry.detail","title":"detail  <code>instance-attribute</code>","text":"<pre><code>detail: dict[str, Any]\n</code></pre>"},{"location":"api/types/#fr24.types.find.Entry.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal[\n    \"airport\", \"operator\", \"live\", \"schedule\", \"aircraft\"\n]\n</code></pre>"},{"location":"api/types/#fr24.types.find.Entry.match","title":"match  <code>instance-attribute</code>","text":"<pre><code>match: Literal['icao', 'iata', 'begins']\n</code></pre>"},{"location":"api/types/#fr24.types.find.Entry.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/types/#fr24.types.find.StatsEntry","title":"StatsEntry","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.StatsEntry.all","title":"all  <code>instance-attribute</code>","text":"<pre><code>all: int\n</code></pre>"},{"location":"api/types/#fr24.types.find.StatsEntry.airport","title":"airport  <code>instance-attribute</code>","text":"<pre><code>airport: int\n</code></pre>"},{"location":"api/types/#fr24.types.find.StatsEntry.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator: int\n</code></pre>"},{"location":"api/types/#fr24.types.find.StatsEntry.live","title":"live  <code>instance-attribute</code>","text":"<pre><code>live: int\n</code></pre>"},{"location":"api/types/#fr24.types.find.StatsEntry.schedule","title":"schedule  <code>instance-attribute</code>","text":"<pre><code>schedule: int\n</code></pre>"},{"location":"api/types/#fr24.types.find.StatsEntry.aircraft","title":"aircraft  <code>instance-attribute</code>","text":"<pre><code>aircraft: int\n</code></pre>"},{"location":"api/types/#fr24.types.find.Stats","title":"Stats","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.Stats.total","title":"total  <code>instance-attribute</code>","text":"<pre><code>total: StatsEntry\n</code></pre>"},{"location":"api/types/#fr24.types.find.Stats.count","title":"count  <code>instance-attribute</code>","text":"<pre><code>count: StatsEntry\n</code></pre>"},{"location":"api/types/#fr24.types.find.FindResult","title":"FindResult","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.find.FindResult.results","title":"results  <code>instance-attribute</code>","text":"<pre><code>results: list[\n    Union[\n        Entry[Airport],\n        Entry[Operator],\n        Entry[Live],\n        Entry[Schedule],\n        Entry[Aircraft],\n    ]\n]\n</code></pre>"},{"location":"api/types/#fr24.types.find.FindResult.stats","title":"stats  <code>instance-attribute</code>","text":"<pre><code>stats: Stats\n</code></pre>"},{"location":"api/types/#fr24.types.fr24","title":"fr24","text":""},{"location":"api/types/#fr24.types.fr24.Plugin","title":"Plugin  <code>module-attribute</code>","text":"<pre><code>Plugin = Literal[\n    \"details\",\n    \"runways\",\n    \"schedule\",\n    \"satelliteImage\",\n    \"scheduledRoutesStatistics\",\n    \"weather\",\n]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportRequest","title":"AirportRequest  <code>module-attribute</code>","text":"<pre><code>AirportRequest = TypedDict(\n    \"AirportRequest\",\n    {\n        \"callback\": None,\n        \"code\": str,\n        \"device\": Optional[str],\n        \"fleet\": Optional[str],\n        \"format\": Literal[\"json\"],\n        \"limit\": int,\n        \"page\": int,\n        \"pk\": None,\n        \"plugin\": list[Plugin],\n        \"plugin[]\": list[Plugin],\n        \"plugin-setting\": PluginSetting,\n        \"plugin-setting[schedule][mode]\": str,\n        \"plugin-setting[schedule][timestamp]\": int,\n        \"token\": Optional[str],\n    },\n    total=False,\n)\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.LivefeedField","title":"LivefeedField  <code>module-attribute</code>","text":"<pre><code>LivefeedField = Literal[\n    \"flight\",\n    \"reg\",\n    \"route\",\n    \"type\",\n    \"squawk\",\n    \"vspeed\",\n    \"airspace\",\n    \"logo_id\",\n    \"age\",\n]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.User","title":"User","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.User.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: Required[int]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.User.identity","title":"identity  <code>instance-attribute</code>","text":"<pre><code>identity: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.User.locale","title":"locale  <code>instance-attribute</code>","text":"<pre><code>locale: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Features","title":"Features","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.UserData","title":"UserData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.UserData.accessToken","title":"accessToken  <code>instance-attribute</code>","text":"<pre><code>accessToken: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.accountType","title":"accountType  <code>instance-attribute</code>","text":"<pre><code>accountType: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.countryCode","title":"countryCode  <code>instance-attribute</code>","text":"<pre><code>countryCode: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.dateExpires","title":"dateExpires  <code>instance-attribute</code>","text":"<pre><code>dateExpires: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.dateLastLogin","title":"dateLastLogin  <code>instance-attribute</code>","text":"<pre><code>dateLastLogin: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.features","title":"features  <code>instance-attribute</code>","text":"<pre><code>features: Features\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.hasConsented","title":"hasConsented  <code>instance-attribute</code>","text":"<pre><code>hasConsented: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.hasPassword","title":"hasPassword  <code>instance-attribute</code>","text":"<pre><code>hasPassword: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.idUser","title":"idUser  <code>instance-attribute</code>","text":"<pre><code>idUser: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.identity","title":"identity  <code>instance-attribute</code>","text":"<pre><code>identity: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.isActive","title":"isActive  <code>instance-attribute</code>","text":"<pre><code>isActive: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.isAnonymousAccount","title":"isAnonymousAccount  <code>instance-attribute</code>","text":"<pre><code>isAnonymousAccount: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.isLoggedIn","title":"isLoggedIn  <code>instance-attribute</code>","text":"<pre><code>isLoggedIn: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.localeCode","title":"localeCode  <code>instance-attribute</code>","text":"<pre><code>localeCode: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.oAuth","title":"oAuth  <code>instance-attribute</code>","text":"<pre><code>oAuth: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.oAuthType","title":"oAuthType  <code>instance-attribute</code>","text":"<pre><code>oAuthType: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.publicKey","title":"publicKey  <code>instance-attribute</code>","text":"<pre><code>publicKey: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.subscriptionKey","title":"subscriptionKey  <code>instance-attribute</code>","text":"<pre><code>subscriptionKey: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.tokenLogin","title":"tokenLogin  <code>instance-attribute</code>","text":"<pre><code>tokenLogin: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UserData.typeSource","title":"typeSource  <code>instance-attribute</code>","text":"<pre><code>typeSource: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication","title":"Authentication","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Authentication.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.response_code","title":"response_code  <code>instance-attribute</code>","text":"<pre><code>response_code: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.responseCode","title":"responseCode  <code>instance-attribute</code>","text":"<pre><code>responseCode: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.success","title":"success  <code>instance-attribute</code>","text":"<pre><code>success: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.token","title":"token  <code>instance-attribute</code>","text":"<pre><code>token: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.user","title":"user  <code>instance-attribute</code>","text":"<pre><code>user: User\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.features","title":"features  <code>instance-attribute</code>","text":"<pre><code>features: Features\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Authentication.userData","title":"userData  <code>instance-attribute</code>","text":"<pre><code>userData: Required[UserData]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UsernamePassword","title":"UsernamePassword","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.UsernamePassword.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.UsernamePassword.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TokenSubscriptionKey","title":"TokenSubscriptionKey","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.TokenSubscriptionKey.subscriptionKey","title":"subscriptionKey  <code>instance-attribute</code>","text":"<pre><code>subscriptionKey: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TokenSubscriptionKey.token","title":"token  <code>instance-attribute</code>","text":"<pre><code>token: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.APIResult","title":"APIResult","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.APIResult.copyright","title":"copyright  <code>instance-attribute</code>","text":"<pre><code>copyright: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.APIResult.legalNotice","title":"legalNotice  <code>instance-attribute</code>","text":"<pre><code>legalNotice: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest","title":"PlaybackRequest","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest.callback","title":"callback  <code>instance-attribute</code>","text":"<pre><code>callback: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest.device","title":"device  <code>instance-attribute</code>","text":"<pre><code>device: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest.flightId","title":"flightId  <code>instance-attribute</code>","text":"<pre><code>flightId: Required[str]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest.format","title":"format  <code>instance-attribute</code>","text":"<pre><code>format: Literal['json']\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest.pk","title":"pk  <code>instance-attribute</code>","text":"<pre><code>pk: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackRequest.token","title":"token  <code>instance-attribute</code>","text":"<pre><code>token: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightNumber","title":"FlightNumber","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightNumber.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightNumber.alternative","title":"alternative  <code>instance-attribute</code>","text":"<pre><code>alternative: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightIdentification","title":"FlightIdentification","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightIdentification.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightIdentification.number","title":"number  <code>instance-attribute</code>","text":"<pre><code>number: FlightNumber\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightIdentification.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EventTime","title":"EventTime","text":""},{"location":"api/types/#fr24.types.fr24.EventTime.utc","title":"utc  <code>instance-attribute</code>","text":"<pre><code>utc: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EventTime.local","title":"local  <code>instance-attribute</code>","text":"<pre><code>local: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.GenericStatus","title":"GenericStatus","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.GenericStatus.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.GenericStatus.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.GenericStatus.color","title":"color  <code>instance-attribute</code>","text":"<pre><code>color: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.GenericStatus.diverted","title":"diverted  <code>instance-attribute</code>","text":"<pre><code>diverted: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.GenericStatus.eventTime","title":"eventTime  <code>instance-attribute</code>","text":"<pre><code>eventTime: EventTime\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.GenericEventTime","title":"GenericEventTime","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.GenericEventTime.utc","title":"utc  <code>instance-attribute</code>","text":"<pre><code>utc: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.GenericEventTime.local","title":"local  <code>instance-attribute</code>","text":"<pre><code>local: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusGeneric","title":"StatusGeneric","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.StatusGeneric.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: GenericStatus\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusGeneric.eventTime","title":"eventTime  <code>instance-attribute</code>","text":"<pre><code>eventTime: GenericEventTime\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusData","title":"StatusData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.StatusData.live","title":"live  <code>instance-attribute</code>","text":"<pre><code>live: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusData.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusData.icon","title":"icon  <code>instance-attribute</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusData.estimated","title":"estimated  <code>instance-attribute</code>","text":"<pre><code>estimated: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusData.ambiguous","title":"ambiguous  <code>instance-attribute</code>","text":"<pre><code>ambiguous: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.StatusData.generic","title":"generic  <code>instance-attribute</code>","text":"<pre><code>generic: StatusGeneric\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftModel","title":"AircraftModel","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AircraftModel.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftModel.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftAge","title":"AircraftAge","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AircraftAge.availability","title":"availability  <code>instance-attribute</code>","text":"<pre><code>availability: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftAge.date","title":"date  <code>instance-attribute</code>","text":"<pre><code>date: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftAvailability","title":"AircraftAvailability","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AircraftAvailability.serialNo","title":"serialNo  <code>instance-attribute</code>","text":"<pre><code>serialNo: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftAvailability.age","title":"age  <code>instance-attribute</code>","text":"<pre><code>age: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftIdentification","title":"AircraftIdentification","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AircraftIdentification.modes","title":"modes  <code>instance-attribute</code>","text":"<pre><code>modes: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftIdentification.registration","title":"registration  <code>instance-attribute</code>","text":"<pre><code>registration: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftIdentification.serialNo","title":"serialNo  <code>instance-attribute</code>","text":"<pre><code>serialNo: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftIdentification.age","title":"age  <code>instance-attribute</code>","text":"<pre><code>age: None | AircraftAge\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftIdentification.availability","title":"availability  <code>instance-attribute</code>","text":"<pre><code>availability: AircraftAvailability\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftData","title":"AircraftData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AircraftData.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: AircraftModel\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftData.identification","title":"identification  <code>instance-attribute</code>","text":"<pre><code>identification: AircraftIdentification\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftData.availability","title":"availability  <code>instance-attribute</code>","text":"<pre><code>availability: AircraftAvailability\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.IATA_ICAO","title":"IATA_ICAO","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.IATA_ICAO.iata","title":"iata  <code>instance-attribute</code>","text":"<pre><code>iata: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.IATA_ICAO.icao","title":"icao  <code>instance-attribute</code>","text":"<pre><code>icao: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.OwnerData","title":"OwnerData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.OwnerData.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.OwnerData.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: IATA_ICAO\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirlineData","title":"AirlineData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirlineData.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirlineData.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: IATA_ICAO\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirlineData.short","title":"short  <code>instance-attribute</code>","text":"<pre><code>short: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportCode","title":"AirportCode","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportCode.iata","title":"iata  <code>instance-attribute</code>","text":"<pre><code>iata: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportCode.icao","title":"icao  <code>instance-attribute</code>","text":"<pre><code>icao: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Country","title":"Country","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Country.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Country.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Country.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Region","title":"Region","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Region.city","title":"city  <code>instance-attribute</code>","text":"<pre><code>city: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPosition","title":"AirportPosition","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportPosition.latitude","title":"latitude  <code>instance-attribute</code>","text":"<pre><code>latitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPosition.longitude","title":"longitude  <code>instance-attribute</code>","text":"<pre><code>longitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPosition.country","title":"country  <code>instance-attribute</code>","text":"<pre><code>country: Country\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPosition.region","title":"region  <code>instance-attribute</code>","text":"<pre><code>region: Region\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Timezone","title":"Timezone","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Timezone.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Timezone.offset","title":"offset  <code>instance-attribute</code>","text":"<pre><code>offset: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Timezone.abbr","title":"abbr  <code>instance-attribute</code>","text":"<pre><code>abbr: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Timezone.abbrName","title":"abbrName  <code>instance-attribute</code>","text":"<pre><code>abbrName: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Timezone.isDst","title":"isDst  <code>instance-attribute</code>","text":"<pre><code>isDst: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Airport","title":"Airport","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Airport.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Airport.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: AirportCode\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Airport.position","title":"position  <code>instance-attribute</code>","text":"<pre><code>position: AirportPosition\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Airport.timezone","title":"timezone  <code>instance-attribute</code>","text":"<pre><code>timezone: Timezone\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Airport.real","title":"real  <code>instance-attribute</code>","text":"<pre><code>real: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPairData","title":"AirportPairData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportPairData.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: None | Airport\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPairData.destination","title":"destination  <code>instance-attribute</code>","text":"<pre><code>destination: None | Airport\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPairData.real","title":"real  <code>instance-attribute</code>","text":"<pre><code>real: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Median","title":"Median","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Median.time","title":"time  <code>instance-attribute</code>","text":"<pre><code>time: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Median.delay","title":"delay  <code>instance-attribute</code>","text":"<pre><code>delay: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Median.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Altitude","title":"Altitude","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Altitude.feet","title":"feet  <code>instance-attribute</code>","text":"<pre><code>feet: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Altitude.meters","title":"meters  <code>instance-attribute</code>","text":"<pre><code>meters: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Speed","title":"Speed","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Speed.kmh","title":"kmh  <code>instance-attribute</code>","text":"<pre><code>kmh: float\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Speed.kts","title":"kts  <code>instance-attribute</code>","text":"<pre><code>kts: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Speed.mph","title":"mph  <code>instance-attribute</code>","text":"<pre><code>mph: float\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.VerticalSpeed","title":"VerticalSpeed","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.VerticalSpeed.fpm","title":"fpm  <code>instance-attribute</code>","text":"<pre><code>fpm: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.VerticalSpeed.ms","title":"ms  <code>instance-attribute</code>","text":"<pre><code>ms: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS","title":"EMS","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.EMS.ts","title":"ts  <code>instance-attribute</code>","text":"<pre><code>ts: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.ias","title":"ias  <code>instance-attribute</code>","text":"<pre><code>ias: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.tas","title":"tas  <code>instance-attribute</code>","text":"<pre><code>tas: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.mach","title":"mach  <code>instance-attribute</code>","text":"<pre><code>mach: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.mcp","title":"mcp  <code>instance-attribute</code>","text":"<pre><code>mcp: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.fms","title":"fms  <code>instance-attribute</code>","text":"<pre><code>fms: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.autopilot","title":"autopilot  <code>instance-attribute</code>","text":"<pre><code>autopilot: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.oat","title":"oat  <code>instance-attribute</code>","text":"<pre><code>oat: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.trueTrack","title":"trueTrack  <code>instance-attribute</code>","text":"<pre><code>trueTrack: float | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.rollAngle","title":"rollAngle  <code>instance-attribute</code>","text":"<pre><code>rollAngle: float | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.qnh","title":"qnh  <code>instance-attribute</code>","text":"<pre><code>qnh: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.windDir","title":"windDir  <code>instance-attribute</code>","text":"<pre><code>windDir: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.windSpd","title":"windSpd  <code>instance-attribute</code>","text":"<pre><code>windSpd: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.precision","title":"precision  <code>instance-attribute</code>","text":"<pre><code>precision: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.altGPS","title":"altGPS  <code>instance-attribute</code>","text":"<pre><code>altGPS: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.emergencyStatus","title":"emergencyStatus  <code>instance-attribute</code>","text":"<pre><code>emergencyStatus: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.tcasAcasDtatus","title":"tcasAcasDtatus  <code>instance-attribute</code>","text":"<pre><code>tcasAcasDtatus: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.EMS.heading","title":"heading  <code>instance-attribute</code>","text":"<pre><code>heading: int | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData","title":"TrackData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.TrackData.latitude","title":"latitude  <code>instance-attribute</code>","text":"<pre><code>latitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData.longitude","title":"longitude  <code>instance-attribute</code>","text":"<pre><code>longitude: float\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData.altitude","title":"altitude  <code>instance-attribute</code>","text":"<pre><code>altitude: Altitude\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData.speed","title":"speed  <code>instance-attribute</code>","text":"<pre><code>speed: Speed\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData.verticalSpeed","title":"verticalSpeed  <code>instance-attribute</code>","text":"<pre><code>verticalSpeed: VerticalSpeed\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData.heading","title":"heading  <code>instance-attribute</code>","text":"<pre><code>heading: int\n</code></pre> <p>Warning</p> <p>The JSON response claims that <code>heading</code> is available, but ADS-B only transmits the ground track. Heading is only available in EMS data.</p> <p>This field is renamed to <code>track</code> to avoid confusion in fr24.history.playback_track_dict.</p>"},{"location":"api/types/#fr24.types.fr24.TrackData.squawk","title":"squawk  <code>instance-attribute</code>","text":"<pre><code>squawk: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TrackData.ems","title":"ems  <code>instance-attribute</code>","text":"<pre><code>ems: None | EMS\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Thumbnail","title":"Thumbnail","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Thumbnail.src","title":"src  <code>instance-attribute</code>","text":"<pre><code>src: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Thumbnail.link","title":"link  <code>instance-attribute</code>","text":"<pre><code>link: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Thumbnail.copyright","title":"copyright  <code>instance-attribute</code>","text":"<pre><code>copyright: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Thumbnail.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AircraftImages","title":"AircraftImages","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AircraftImages.thumbnails","title":"thumbnails  <code>instance-attribute</code>","text":"<pre><code>thumbnails: list[Thumbnail]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData","title":"FlightData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightData.identification","title":"identification  <code>instance-attribute</code>","text":"<pre><code>identification: FlightIdentification\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: StatusData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.aircraft","title":"aircraft  <code>instance-attribute</code>","text":"<pre><code>aircraft: AircraftData | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.owner","title":"owner  <code>instance-attribute</code>","text":"<pre><code>owner: OwnerData | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.airline","title":"airline  <code>instance-attribute</code>","text":"<pre><code>airline: AirlineData | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.airport","title":"airport  <code>instance-attribute</code>","text":"<pre><code>airport: AirportPairData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.median","title":"median  <code>instance-attribute</code>","text":"<pre><code>median: Median\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.track","title":"track  <code>instance-attribute</code>","text":"<pre><code>track: list[TrackData]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightData.aircraftImages","title":"aircraftImages  <code>instance-attribute</code>","text":"<pre><code>aircraftImages: AircraftImages\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackData","title":"PlaybackData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.PlaybackData.flight","title":"flight  <code>instance-attribute</code>","text":"<pre><code>flight: FlightData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackResponse","title":"PlaybackResponse","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.PlaybackResponse.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackResponse.altitudeFiltered","title":"altitudeFiltered  <code>instance-attribute</code>","text":"<pre><code>altitudeFiltered: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackResponse.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: PlaybackData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackResult","title":"PlaybackResult","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.PlaybackResult.request","title":"request  <code>instance-attribute</code>","text":"<pre><code>request: PlaybackRequest\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PlaybackResult.response","title":"response  <code>instance-attribute</code>","text":"<pre><code>response: PlaybackResponse\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Playback","title":"Playback","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Playback.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result: PlaybackResult\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest","title":"FlightListRequest","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.callback","title":"callback  <code>instance-attribute</code>","text":"<pre><code>callback: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.device","title":"device  <code>instance-attribute</code>","text":"<pre><code>device: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.fetchBy","title":"fetchBy  <code>instance-attribute</code>","text":"<pre><code>fetchBy: Required[str]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.filterBy","title":"filterBy  <code>instance-attribute</code>","text":"<pre><code>filterBy: str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.format","title":"format  <code>instance-attribute</code>","text":"<pre><code>format: Literal['json']\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit: Required[int]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.olderThenFlightID","title":"olderThenFlightID  <code>instance-attribute</code>","text":"<pre><code>olderThenFlightID: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.page","title":"page  <code>instance-attribute</code>","text":"<pre><code>page: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.pk","title":"pk  <code>instance-attribute</code>","text":"<pre><code>pk: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.query","title":"query  <code>instance-attribute</code>","text":"<pre><code>query: Required[str]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListRequest.token","title":"token  <code>instance-attribute</code>","text":"<pre><code>token: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Item","title":"Item","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Item.current","title":"current  <code>instance-attribute</code>","text":"<pre><code>current: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Item.total","title":"total  <code>instance-attribute</code>","text":"<pre><code>total: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Item.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Page","title":"Page","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Page.current","title":"current  <code>instance-attribute</code>","text":"<pre><code>current: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Page.more","title":"more  <code>instance-attribute</code>","text":"<pre><code>more: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Page.total","title":"total  <code>instance-attribute</code>","text":"<pre><code>total: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Identification","title":"Identification","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Identification.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str | None\n</code></pre> <p>icao hex</p>"},{"location":"api/types/#fr24.types.fr24.Identification.row","title":"row  <code>instance-attribute</code>","text":"<pre><code>row: int\n</code></pre> <p>internal row id</p>"},{"location":"api/types/#fr24.types.fr24.Identification.number","title":"number  <code>instance-attribute</code>","text":"<pre><code>number: FlightNumber\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Identification.callsign","title":"callsign  <code>instance-attribute</code>","text":"<pre><code>callsign: str | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Identification.codeshare","title":"codeshare  <code>instance-attribute</code>","text":"<pre><code>codeshare: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListCountry","title":"FlightListCountry","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightListCountry.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListCountry.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListCountry.alpha2","title":"alpha2  <code>instance-attribute</code>","text":"<pre><code>alpha2: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListCountry.alpha3","title":"alpha3  <code>instance-attribute</code>","text":"<pre><code>alpha3: None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData","title":"FlightListAircraftData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: AircraftModel\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.registration","title":"registration  <code>instance-attribute</code>","text":"<pre><code>registration: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.country","title":"country  <code>instance-attribute</code>","text":"<pre><code>country: None | FlightListCountry\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.hex","title":"hex  <code>instance-attribute</code>","text":"<pre><code>hex: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.restricted","title":"restricted  <code>instance-attribute</code>","text":"<pre><code>restricted: bool\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.serialNo","title":"serialNo  <code>instance-attribute</code>","text":"<pre><code>serialNo: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.age","title":"age  <code>instance-attribute</code>","text":"<pre><code>age: None | str\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.availability","title":"availability  <code>instance-attribute</code>","text":"<pre><code>availability: AircraftAvailability\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.onGroundUpdate","title":"onGroundUpdate  <code>instance-attribute</code>","text":"<pre><code>onGroundUpdate: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.hoursDiff","title":"hoursDiff  <code>instance-attribute</code>","text":"<pre><code>hoursDiff: None | float\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListAircraftData.timeDiff","title":"timeDiff  <code>instance-attribute</code>","text":"<pre><code>timeDiff: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Interval","title":"Interval","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Interval.departure","title":"departure  <code>instance-attribute</code>","text":"<pre><code>departure: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Interval.arrival","title":"arrival  <code>instance-attribute</code>","text":"<pre><code>arrival: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TimeOther","title":"TimeOther","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.TimeOther.eta","title":"eta  <code>instance-attribute</code>","text":"<pre><code>eta: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TimeOther.updated","title":"updated  <code>instance-attribute</code>","text":"<pre><code>updated: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.TimeOther.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: None | int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListTime","title":"FlightListTime","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightListTime.scheduled","title":"scheduled  <code>instance-attribute</code>","text":"<pre><code>scheduled: Interval\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListTime.real","title":"real  <code>instance-attribute</code>","text":"<pre><code>real: Interval\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListTime.estimated","title":"estimated  <code>instance-attribute</code>","text":"<pre><code>estimated: Interval\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListTime.other","title":"other  <code>instance-attribute</code>","text":"<pre><code>other: TimeOther\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListItem","title":"FlightListItem","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightListItem.identification","title":"identification  <code>instance-attribute</code>","text":"<pre><code>identification: Identification\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListItem.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: StatusData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListItem.aircraft","title":"aircraft  <code>instance-attribute</code>","text":"<pre><code>aircraft: FlightListAircraftData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListItem.owner","title":"owner  <code>instance-attribute</code>","text":"<pre><code>owner: OwnerData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListItem.airline","title":"airline  <code>instance-attribute</code>","text":"<pre><code>airline: AirlineData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListItem.airport","title":"airport  <code>instance-attribute</code>","text":"<pre><code>airport: AirportPairData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListItem.time","title":"time  <code>instance-attribute</code>","text":"<pre><code>time: FlightListTime\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListResponse","title":"FlightListResponse","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightListResponse.item","title":"item  <code>instance-attribute</code>","text":"<pre><code>item: Item\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListResponse.page","title":"page  <code>instance-attribute</code>","text":"<pre><code>page: Page\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListResponse.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListResponse.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: None | list[FlightListItem]\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListResult","title":"FlightListResult","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightListResult.request","title":"request  <code>instance-attribute</code>","text":"<pre><code>request: FlightListRequest\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightListResult.response","title":"response  <code>instance-attribute</code>","text":"<pre><code>response: FlightListResponse\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.FlightList","title":"FlightList","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.FlightList.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result: FlightListResult\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Schedule","title":"Schedule","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.Schedule.mode","title":"mode  <code>instance-attribute</code>","text":"<pre><code>mode: Literal['departures', 'arrivals'] | None\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.Schedule.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: int\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.PluginSetting","title":"PluginSetting","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.PluginSetting.schedule","title":"schedule  <code>instance-attribute</code>","text":"<pre><code>schedule: Schedule\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportSchedule","title":"AirportSchedule","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportSchedule.arrivals","title":"arrivals  <code>instance-attribute</code>","text":"<pre><code>arrivals: FlightListResponse\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportSchedule.departures","title":"departures  <code>instance-attribute</code>","text":"<pre><code>departures: FlightListResponse\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportPluginData","title":"AirportPluginData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportPluginData.schedule","title":"schedule  <code>instance-attribute</code>","text":"<pre><code>schedule: AirportSchedule\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportListData","title":"AirportListData","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportListData.pluginData","title":"pluginData  <code>instance-attribute</code>","text":"<pre><code>pluginData: AirportPluginData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportResponse","title":"AirportResponse","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportResponse.airport","title":"airport  <code>instance-attribute</code>","text":"<pre><code>airport: AirportListData\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportResult","title":"AirportResult","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportResult.request","title":"request  <code>instance-attribute</code>","text":"<pre><code>request: AirportRequest\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportResult.response","title":"response  <code>instance-attribute</code>","text":"<pre><code>response: AirportResponse\n</code></pre>"},{"location":"api/types/#fr24.types.fr24.AirportList","title":"AirportList","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/types/#fr24.types.fr24.AirportList.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result: AirportResult\n</code></pre>"},{"location":"usage/authentication/","title":"Authentication","text":"<p>By default, the client is not authenticated. You can check the status using the CLI:</p> ShellOutput <pre><code>fr24 auth show\n</code></pre> <pre><code>You are not authenticated.\nProvide credentials in environment variables: either \n- fr24_username + fr24_password or \n- fr24_subscription_key + fr24_token\nAlternatively, copy the example config file to /home/user/.config/fr24/fr24.conf.\n</code></pre> <p>You should be authenticated if you would like to access more history or use the data for commercial purposes.</p> <p>Set the following environment variables:</p> <ul> <li><code>fr24_username</code> and <code>fr24_password</code>: (not recommended<sup>1</sup>); OR</li> <li><code>fr24_subscription_key</code> and <code>fr24_token</code><sup>2</sup>;</li> </ul>"},{"location":"usage/authentication/#config-file","title":"Config File","text":"<p>Alternatively, you can also create a configuration file in the config directory.</p> <p>An example of it can be found at <code>fr24.example.conf</code>:</p> username + passwordsubscription_key + token <pre><code>[global]\nusername=example13@example.com\npassword=example13\n</code></pre> <pre><code>[global]\nsubscription_key=dQw4w9WgXcQdQw4w9WgXcQdQw4w9WgXcQdQw4w9WgXcQ\ntoken=eyq2IlMJ5ip3ElLJ5aMKWmqT9fo3MyrJ91n25iq3EbMKW1oTImLJ5xp29xo2x=\n</code></pre> <ol> <li> <p>When the FR24 class' context is entered, a request is automatically made to retrieve the OAuth tokens\u00a0\u21a9</p> </li> <li> <p><code>fr24_token</code> should be a JWT with the <code>exp</code> claim in a month, while <code>fr24_subscription_key</code> should be the shorter one. <code>fr24_token</code> is optional but live feed will fail without it. Be sure to update the JWT in time.\u00a0\u21a9</p> </li> </ol>"},{"location":"usage/cli/","title":"CLI","text":"<p>List all commands and show help:</p> ShellOutput <pre><code>fr24 --help\n</code></pre> <pre><code>    Usage: fr24 [OPTIONS] COMMAND [ARGS]...                                        \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --install-completion          Install completion for the current shell.      \u2502\n\u2502 --show-completion             Show completion for the current shell, to copy \u2502\n\u2502                               it or customize the installation.              \u2502\n\u2502 --help                        Show this message and exit.                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 auth          Commands for authentication                                    \u2502\n\u2502 dirs          Shows relevant directories                                     \u2502\n\u2502 feed          Fetches current livefeed / playback of live feed at a given    \u2502\n\u2502               time                                                           \u2502\n\u2502 flight-list   Fetches flight list for the given registration or flight       \u2502\n\u2502               number                                                         \u2502\n\u2502 playback      Fetches historical track playback data for the given flight    \u2502\n\u2502 tui           Starts the TUI                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Dump the current (or playback of) live feed:</p> ShellOutput <pre><code>fr24 feed --help\nfr24 feed\nfr24 feed --timestamp 2023-12-17T18:56:00\nfr24 feed -o feed.parquet\nfr24 feed --format csv -o - &gt; feed.csv\n</code></pre> <pre><code>$ fr24 feed --help\n\n    Usage: fr24 feed [OPTIONS]                                                     \n\n    Fetches current livefeed / playback of live feed at a given time               \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --timestamp          TEXT  Time of the snapshot (optional), a                \u2502\n\u2502                            pd.Timestamp-supported input (e.g.                \u2502\n\u2502                            2024-06-04T00:00:00). Live data will be fetched   \u2502\n\u2502                            if not provided.                                  \u2502\n\u2502                            [default: None]                                   \u2502\n\u2502 --output     -o      FILE  Save results as parquet to a specific filepath.   \u2502\n\u2502                            If `-`, results will be printed to stdout.        \u2502\n\u2502                            [default: None]                                   \u2502\n\u2502 --format     -f      TEXT  Output format, `parquet` or `csv`                 \u2502\n\u2502                            [default: parquet]                                \u2502\n\u2502 --help                     Show this message and exit.                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ fr24 feed -o feed.parquet\nSuccess: wrote 13203 rows (977555 bytes) to /home/user/feed.parquet.\nPreview:\n        timestamp   flightid   latitude  ...  eta  vertical_speed  squawk\n0      1719299644  903268975 -55.104115  ...    0               0       0\n1      1719299640  903241011  12.738794  ...    0               0       0\n2      1719299640  903274343  -8.169031  ...    0               0       0\n3      1719299644  903291574 -25.104246  ...    0               0       0\n4      1719299644  903256822 -10.495483  ...    0               0       0\n...           ...        ...        ...  ...  ...             ...     ...\n13198  1719299644  903286908  54.931980  ...    0               0       0\n13199  1719299643  903251738  64.749939  ...    0               0       0\n13200  1719299636  903281352  56.771660  ...    0               0       0\n13201  1719299644  903288803  56.406754  ...    0               0       0\n13202  1719299636  903274725  59.058872  ...    0               0       0\n\n[13203 rows x 17 columns]\n\n$ duckdb -c \"describe select * from 'feed.parquet';\"\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  column_name   \u2502 column_type \u2502  null   \u2502   key   \u2502 default \u2502  extra  \u2502\n\u2502    varchar     \u2502   varchar   \u2502 varchar \u2502 varchar \u2502 varchar \u2502 varchar \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 timestamp      \u2502 UINTEGER    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 flightid       \u2502 UINTEGER    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 latitude       \u2502 FLOAT       \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 longitude      \u2502 FLOAT       \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 track          \u2502 USMALLINT   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 altitude       \u2502 INTEGER     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 ground_speed   \u2502 SMALLINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 on_ground      \u2502 BOOLEAN     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 callsign       \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 source         \u2502 UTINYINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 registration   \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 origin         \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 destination    \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 typecode       \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 eta            \u2502 UINTEGER    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 vertical_speed \u2502 SMALLINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 squawk         \u2502 USMALLINT   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 17 rows                                                    6 columns \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Dump the flight list for a given registration or flight number</p> ShellOutput <pre><code>fr24 flight-list --help\nfr24 flight-list --reg B-HPB\nfr24 flight-list --flight CX488\nfr24 flight-list --flight CX488 --all\nfr24 flight-list --reg B-HPB -o flight-list.parquet\nfr24 flight-list --reg B-HPB --format csv -o - &gt; flight-list.csv\n</code></pre> <pre><code>$ fr24 flight-list --help\n\nUsage: fr24 flight-list [OPTIONS]                                              \n\nFetches flight list for the given registration or flight number                \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --reg                TEXT  Aircraft registration (e.g. B-HUJ)                \u2502\n\u2502                            [default: None]                                   \u2502\n\u2502 --flight             TEXT  Flight number (e.g. CX8747) [default: None]       \u2502\n\u2502 --timestamp          TEXT  Show flights with ATD before this time            \u2502\n\u2502                            (optional), a pd.Timestamp-supported input (e.g.  \u2502\n\u2502                            2024-06-04T00:00:00)                              \u2502\n\u2502                            [default: now]                                    \u2502\n\u2502 --all                      Get all pages of flight list                      \u2502\n\u2502 --output     -o      FILE  Save results as parquet to a specific filepath.   \u2502\n\u2502                            If `-`, results will be printed to stdout.        \u2502\n\u2502                            [default: None]                                   \u2502\n\u2502 --format     -f      TEXT  Output format, `parquet` or `csv`                 \u2502\n\u2502                            [default: parquet]                                \u2502\n\u2502 --help                     Show this message and exit.                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ fr24 flight-list --reg B-HPB -o flight-list.parquet\nSuccess: wrote 10 rows (1284 bytes) to /home/user/flight-list.parquet.\nPreview:\nflight_id number callsign  ...                STOA ETOA                ATOA\n0  903287789  CX740   CPA740  ... 2024-06-25 06:00:00  NaT 2024-06-25 06:03:45\n1  903258455  CX741   CPA741  ... 2024-06-25 02:55:00  NaT 2024-06-25 03:03:05\n2  903220233  CX976   CPA976  ... 2024-06-24 23:40:00  NaT 2024-06-24 23:23:07\n3  903076265  CX913   CPA913  ... 2024-06-24 14:55:00  NaT 2024-06-24 14:43:22\n4  902956726  CX976   CPA976  ... 2024-06-23 23:40:00  NaT 2024-06-23 23:41:52\n5  902846134  CX913   CPA913  ... 2024-06-23 14:55:00  NaT 2024-06-23 15:11:38\n6  902775946  CX439   CPA439  ... 2024-06-23 08:25:00  NaT 2024-06-23 08:18:22\n7  902740251  CX434   CPA434  ... 2024-06-23 03:35:00  NaT 2024-06-23 03:25:48\n8  902529354  CX385   CPA385  ... 2024-06-22 06:00:00  NaT 2024-06-22 06:01:42\n9  902502853  CX384   CPA384  ... 2024-06-22 02:50:00  NaT 2024-06-22 03:18:45\n\n[10 rows x 15 columns]\n\n$ duckdb -c \"describe select * from 'flight-list.parquet';\"\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 column_name  \u2502 column_type \u2502  null   \u2502   key   \u2502 default \u2502  extra  \u2502\n\u2502   varchar    \u2502   varchar   \u2502 varchar \u2502 varchar \u2502 varchar \u2502 varchar \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 flight_id    \u2502 UBIGINT     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 number       \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 callsign     \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 icao24       \u2502 UINTEGER    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 registration \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 typecode     \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 origin       \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 destination  \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 status       \u2502 VARCHAR     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 STOD         \u2502 TIMESTAMP   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 ETOD         \u2502 TIMESTAMP   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 ATOD         \u2502 TIMESTAMP   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 STOA         \u2502 TIMESTAMP   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 ETOA         \u2502 TIMESTAMP   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 ATOA         \u2502 TIMESTAMP   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 15 rows                                                  6 columns \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Dump the historical track playback data for the given flight</p> ShellOutput <pre><code>fr24 playback --help\nfr24 playback 2d81a27\nfr24 playback 2d81a27 -o playback.parquet\nfr24 playback 2d81a27 --format csv -o - &gt; playback.csv\n</code></pre> <pre><code>$ fr24 playback --help\n\nUsage: fr24 playback [OPTIONS] FLIGHT_ID                                       \n\nFetches historical track playback data for the given flight                    \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    flight_id      TEXT  Hex Flight ID (e.g. `2d81a27`, `0x2d81a27`)        \u2502\n\u2502                           [default: None]                                    \u2502\n\u2502                           [required]                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --timestamp          TEXT  ATD (optional), a pd.Timestamp-supported input    \u2502\n\u2502                            (e.g. 2024-06-04T00:00:00)                        \u2502\n\u2502                            [default: None]                                   \u2502\n\u2502 --output     -o      FILE  Save results as parquet to a specific filepath.   \u2502\n\u2502                            If `-`, results will be printed to stdout.        \u2502\n\u2502                            [default: None]                                   \u2502\n\u2502 --format     -f      TEXT  Output format, `parquet` or `csv`                 \u2502\n\u2502                            [default: parquet]                                \u2502\n\u2502 --help                     Show this message and exit.                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ fr24 playback 2d81a27 -o playback.parquet\nSuccess: wrote 62 rows (4162 bytes) to /home/user/playback.parquet.\nPreview:\n    timestamp  latitude   longitude  ...  track  squawk   ems\n0   1394210550   2.79830  101.689003  ...    328    1135  None\n1   1394210557   2.80333  101.685997  ...    327    1135  None\n2   1394210563   2.80838  101.682999  ...    327    1135  None\n3   1394210570   2.81292  101.680000  ...    327    1135  None\n4   1394210576   2.81841  101.676003  ...    327    1135  None\n..         ...       ...         ...  ...    ...     ...   ...\n57  1394212757   6.78333  103.512001  ...     25    1135  None\n58  1394212768   6.80000  103.519997  ...     25    1135  None\n59  1394212818   6.90314  103.570000  ...     28    1135  None\n60  1394212835   6.93000  103.589996  ...     40    1135  None\n61  1394212863   6.97000  103.629997  ...     40    1135  None\n\n[62 rows x 9 columns]\n\n$ duckdb -c \"describe select * from 'playback.parquet';\"\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  column_name   \u2502     column_type      \u2502  null   \u2502 \u2026 \u2502 default \u2502  extra  \u2502\n\u2502    varchar     \u2502       varchar        \u2502 varchar \u2502   \u2502 varchar \u2502 varchar \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 timestamp      \u2502 UINTEGER             \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 latitude       \u2502 FLOAT                \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 longitude      \u2502 FLOAT                \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 altitude       \u2502 INTEGER              \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 ground_speed   \u2502 SMALLINT             \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 vertical_speed \u2502 SMALLINT             \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 track          \u2502 SMALLINT             \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 squawk         \u2502 USMALLINT            \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u2502 ems            \u2502 STRUCT(\"timestamp\"\u2026  \u2502 YES     \u2502 \u2026 \u2502         \u2502         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 9 rows                                              6 columns (5 shown) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n$ duckdb -c \"describe select unnest(ems) from 'playback.parquet';\"\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 column_name  \u2502 column_type \u2502  null   \u2502   key   \u2502 default \u2502  extra  \u2502\n\u2502   varchar    \u2502   varchar   \u2502 varchar \u2502 varchar \u2502 varchar \u2502 varchar \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 timestamp    \u2502 UINTEGER    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 ias          \u2502 SMALLINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 tas          \u2502 SMALLINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 mach         \u2502 SMALLINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 mcp          \u2502 INTEGER     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 fms          \u2502 INTEGER     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 autopilot    \u2502 TINYINT     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 oat          \u2502 TINYINT     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 track        \u2502 FLOAT       \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 roll         \u2502 FLOAT       \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 qnh          \u2502 USMALLINT   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 wind_dir     \u2502 SMALLINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 wind_speed   \u2502 SMALLINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 precision    \u2502 UTINYINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 altitude_gps \u2502 INTEGER     \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 emergency    \u2502 UTINYINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 tcas_acas    \u2502 UTINYINT    \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u2502 heading      \u2502 USMALLINT   \u2502 YES     \u2502         \u2502         \u2502         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 18 rows                                                  6 columns \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n$ duckdb -c \"copy (select value from parquet_kv_metadata('playback.parquet') where key='_flight') to '/dev/stdout' (format json)\" | jq -r '.value | gsub(\"\\\\\\\\x22\"; \"\\\"\") | fromjson'\n{\n    \"flight_id\": 47716903,\n    \"callsign\": \"MAS370\",\n    \"flight_number\": \"MH370\",\n    \"status_type\": \"departure\",\n    \"status_text\": null,\n    \"status_diverted\": null,\n    \"status_time\": null,\n    \"model_code\": \"B772\",\n    \"icao24\": 7667855,\n    \"registration\": \"9M-MRO\",\n    \"owner\": null,\n    \"airline\": null,\n    \"origin\": \"WMKK\",\n    \"destination\": \"ZBAA\",\n    \"median_delay\": null,\n    \"median_time\": null\n}\n</code></pre> <p>TUI:</p> <pre><code>fr24 tui\n</code></pre> <p>Build and hotload documentation:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"usage/cli/#directories","title":"Directories","text":"<p>Check the location of the config and cache directories with: <pre><code>fr24 dirs\n</code></pre> Here are possible outputs:</p> OS Config File Cache Directory Linux <code>$HOME/.config/fr24/fr24.conf</code> <code>$HOME/.cache/fr24</code> macOS <code>$HOME/Library/Preferences/fr24.conf</code> <code>$HOME/Library/Caches/fr24</code> Windows <code>%LOCALAPPDATA%\\Acme\\fr24\\Cache\\fr24.conf</code> <code>%LOCALAPPDATA%\\Acme\\fr24\\Cache</code>"},{"location":"usage/examples/","title":"Example Gallery","text":"<p>You can find even more usage examples under <code>tests/</code>.</p> <p>Skip to lower level functions</p>"},{"location":"usage/examples/#fr24-class","title":"<code>FR24</code> class","text":""},{"location":"usage/examples/#flight-list","title":"Flight list","text":"<p>API reference: fr24.core.FlightListService, fr24.core.FlightListService.fetch, fr24.core.FlightListService.fetch_all</p>"},{"location":"usage/examples/#single-page","title":"Single page","text":"Jupyter cell<code>data.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_list() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.flight_list.fetch(reg=\"B-HPB\")\n        data = response.to_arrow()\n        print(data.df)\n        data.save()\n\nawait my_list()\n</code></pre> <pre><code>   flight_id  number callsign   icao24 registration typecode origin destination        status                STOD ETOD                ATOD                STOA ETOA                ATOA  \n0  882269295   CX982   CPA982  7901768        B-HPB     A21N   None        None     Scheduled                 NaT  NaT                 NaT                 NaT  NaT                 NaT  \n1  882279849   CX983   CPA983  7901768        B-HPB     A21N   ZGGG        VHHH  Landed 12:28 2024-04-01 02:15:00  NaT 2024-04-01 03:45:26 2024-04-01 03:45:00  NaT 2024-04-01 04:28:37  \n2  882263077   CX982   CPA982  7901768        B-HPB     A21N   VHHH        ZGGG  Landed 10:02 2024-03-31 23:50:00  NaT 2024-04-01 01:30:05 2024-04-01 00:55:00  NaT 2024-04-01 02:02:58  \n3  882098982   CX439   CPA439  7901768        B-HPB     A21N   RKSI        VHHH  Landed 17:02 2024-03-31 04:35:00  NaT 2024-03-31 05:28:02 2024-03-31 08:25:00  NaT 2024-03-31 09:02:19  \n4  882069433  CX2410  CPA2410  7901768        B-HPB     A21N   VHHH        RKSI  Landed 12:49 2024-03-30 23:55:00  NaT 2024-03-31 00:51:40 2024-03-31 03:35:00  NaT 2024-03-31 03:49:22  \n5  881837333   CX976   CPA976  7901768        B-HPB     A21N   RPLL        VHHH  Landed 07:30 2024-03-29 21:45:00  NaT 2024-03-29 21:46:49 2024-03-30 00:05:00  NaT 2024-03-29 23:30:12  \n6  881725491   CX913   CPA913  7901768        B-HPB     A21N   VHHH        RPLL  Landed 22:24 2024-03-29 12:20:00  NaT 2024-03-29 12:42:42 2024-03-29 14:35:00  NaT 2024-03-29 14:24:57  \n7  881693238   CX674   CPA674  7901768        B-HPB     A21N   VTBS        VHHH  Landed 18:58 2024-03-29 08:05:00  NaT 2024-03-29 08:52:54 2024-03-29 10:55:00  NaT 2024-03-29 10:58:14  \n8  881665708   CX653   CPA653  7901768        B-HPB     A21N   VHHH        VTBS  Landed 14:26 2024-03-29 04:00:00  NaT 2024-03-29 04:35:36 2024-03-29 07:05:00  NaT 2024-03-29 07:26:51  \n9  881605496   CX976   CPA976  7901768        B-HPB     A21N   RPLL        VHHH  Landed 07:30 2024-03-28 21:45:00  NaT 2024-03-28 21:46:18 2024-03-29 00:05:00  NaT 2024-03-28 23:30:58  \n</code></pre>"},{"location":"usage/examples/#paginate-all-pages","title":"Paginate all pages","text":"<p>Queries for next page as long as user doesn't enter <code>x</code>, or if there are no pages left. In each iteration, rows are upserted and saved to the cache.</p> <p>Note that pagination cannot be run in parallel: fetching page N requires information from page N-1.</p> Jupyter cell<code>data.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_full_list() -&gt; None:\n    async with FR24() as fr24:\n        data = fr24.flight_list.load(reg=\"B-HPB\")  # (1)!\n        async for response in fr24.flight_list.fetch_all(reg=\"B-HPB\"):\n            data_new = response.to_arrow()\n            data.concat(data_new, inplace=True)  # (2)!\n            if input() == \"x\":\n                break\n            data.save()\n        print(data.df)\n\nawait my_full_list()\n</code></pre> <ol> <li>First attempt to load existing table from the cache, otherwise it creates an empty in-memory arrow table for us to concat to.</li> <li>Upserts the data, replacing older records with new ones.</li> </ol> <pre><code>    flight_id  number callsign   icao24 registration typecode origin destination        status                STOD ETOD                ATOD                STOA ETOA                ATOA  \n0   882269295   CX982   CPA982  7901768        B-HPB     A21N   None        None     Scheduled                 NaT  NaT                 NaT                 NaT  NaT                 NaT  \n1   882279849   CX983   CPA983  7901768        B-HPB     A21N   ZGGG        VHHH  Landed 12:28 2024-04-01 02:15:00  NaT 2024-04-01 03:45:26 2024-04-01 03:45:00  NaT 2024-04-01 04:28:37  \n2   882263077   CX982   CPA982  7901768        B-HPB     A21N   VHHH        ZGGG  Landed 10:02 2024-03-31 23:50:00  NaT 2024-04-01 01:30:05 2024-04-01 00:55:00  NaT 2024-04-01 02:02:58  \n3   882098982   CX439   CPA439  7901768        B-HPB     A21N   RKSI        VHHH  Landed 17:02 2024-03-31 04:35:00  NaT 2024-03-31 05:28:02 2024-03-31 08:25:00  NaT 2024-03-31 09:02:19  \n4   882069433  CX2410  CPA2410  7901768        B-HPB     A21N   VHHH        RKSI  Landed 12:49 2024-03-30 23:55:00  NaT 2024-03-31 00:51:40 2024-03-31 03:35:00  NaT 2024-03-31 03:49:22  \n5   881837333   CX976   CPA976  7901768        B-HPB     A21N   RPLL        VHHH  Landed 07:30 2024-03-29 21:45:00  NaT 2024-03-29 21:46:49 2024-03-30 00:05:00  NaT 2024-03-29 23:30:12  \n6   881725491   CX913   CPA913  7901768        B-HPB     A21N   VHHH        RPLL  Landed 22:24 2024-03-29 12:20:00  NaT 2024-03-29 12:42:42 2024-03-29 14:35:00  NaT 2024-03-29 14:24:57  \n7   881693238   CX674   CPA674  7901768        B-HPB     A21N   VTBS        VHHH  Landed 18:58 2024-03-29 08:05:00  NaT 2024-03-29 08:52:54 2024-03-29 10:55:00  NaT 2024-03-29 10:58:14  \n8   881665708   CX653   CPA653  7901768        B-HPB     A21N   VHHH        VTBS  Landed 14:26 2024-03-29 04:00:00  NaT 2024-03-29 04:35:36 2024-03-29 07:05:00  NaT 2024-03-29 07:26:51  \n9   881605496   CX976   CPA976  7901768        B-HPB     A21N   RPLL        VHHH  Landed 07:30 2024-03-28 21:45:00  NaT 2024-03-28 21:46:18 2024-03-29 00:05:00  NaT 2024-03-28 23:30:58  \n10  881497323   CX913   CPA913  7901768        B-HPB     A21N   VHHH        RPLL  Landed 22:24 2024-03-28 12:20:00  NaT 2024-03-28 12:49:47 2024-03-28 14:35:00  NaT 2024-03-28 14:24:36  \n11  881467141   CX421   CPA421  7901768        B-HPB     A21N   RCTP        VHHH  Landed 18:45 2024-03-28 09:00:00  NaT 2024-03-28 09:11:26 2024-03-28 11:05:00  NaT 2024-03-28 10:45:36  \n12  881447170   CX420   CPA420  7901768        B-HPB     A21N   VHHH        RCTP  Landed 15:33 2024-03-28 05:50:00  NaT 2024-03-28 06:11:32 2024-03-28 07:50:00  NaT 2024-03-28 07:33:47  \n13  881399852   CX449   CPA449  7901768        B-HPB     A21N   RCKH        VHHH  Landed 08:55 2024-03-27 23:45:00  NaT 2024-03-27 23:46:05 2024-03-28 01:15:00  NaT 2024-03-28 00:55:16  \n14  881284852   CX448   CPA448  7901768        B-HPB     A21N   VHHH        RCKH  Landed 22:58 2024-03-27 13:45:00  NaT 2024-03-27 14:02:26 2024-03-27 15:15:00  NaT 2024-03-27 14:58:08  \n15  881224769   CX357   CPA357  7901768        B-HPB     A21N   ZSNJ        VHHH  Landed 16:48 2024-03-27 06:15:00  NaT 2024-03-27 06:38:34 2024-03-27 09:05:00  NaT 2024-03-27 08:48:19  \n16  881200477   CX356   CPA356  7901768        B-HPB     A21N   VHHH        ZSNJ  Landed 13:01 2024-03-27 02:25:00  NaT 2024-03-27 03:09:36 2024-03-27 05:00:00  NaT 2024-03-27 05:01:42  \n17  881059983   CX742   CPA742  7901768        B-HPB     A21N   VVNB        VHHH  Landed 22:12 2024-03-26 12:20:00  NaT 2024-03-26 12:53:49 2024-03-26 14:15:00  NaT 2024-03-26 14:12:35  \n18  881028286   CX743   CPA743  7901768        B-HPB     A21N   VHHH        VVNB  Landed 18:26 2024-03-26 09:15:00  NaT 2024-03-26 09:45:30 2024-03-26 11:20:00  NaT 2024-03-26 11:26:21  \n19  880987691   CX906   CPA906  7901768        B-HPB     A21N   RPLL        VHHH  Landed 13:00 2024-03-26 02:50:00  NaT 2024-03-26 03:17:20 2024-03-26 05:30:00  NaT 2024-03-26 05:00:05  \n20  880961197   CX907   CPA907  7901768        B-HPB     A21N   VHHH        RPLL  Landed 09:31 2024-03-25 23:30:00  NaT 2024-03-25 23:48:48 2024-03-26 01:40:00  NaT 2024-03-26 01:31:18  \n21  880878019   CX989   CPA989  7901768        B-HPB     A21N   ZGGG        VHHH  Landed 00:08 2024-03-25 14:25:00  NaT 2024-03-25 15:32:32 2024-03-25 15:35:00  NaT 2024-03-25 16:08:08  \n22  880853941   CX988   CPA988  7901768        B-HPB     A21N   VHHH        ZGGG  Landed 22:13 2024-03-25 12:05:00  NaT 2024-03-25 13:39:17 2024-03-25 13:10:00  NaT 2024-03-25 14:13:28  \n23  880807848   CX674   CPA674  7901768        B-HPB     A21N   VTBS        VHHH  Landed 18:51 2024-03-25 08:05:00  NaT 2024-03-25 08:27:12 2024-03-25 10:55:00  NaT 2024-03-25 10:51:37  \n24  880782639   CX653   CPA653  7901768        B-HPB     A21N   VHHH        VTBS  Landed 13:51 2024-03-25 04:00:00  NaT 2024-03-25 04:19:31 2024-03-25 07:05:00  NaT 2024-03-25 06:51:40  \n...\n</code></pre>"},{"location":"usage/examples/#playback","title":"Playback","text":"<p>API reference: fr24.core.PlaybackService, fr24.core.PlaybackService.fetch</p>"},{"location":"usage/examples/#miracle-on-the-hudson","title":"Miracle on the Hudson","text":"<p>Downloads the flight trajectory for UA1549</p> Jupyter cell<code>data.df</code><code>data.metadata</code> <pre><code>import rich\nfrom fr24.core import FR24\n\nasync def my_playback() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.playback.fetch(0x2FB3041)  # (1)!\n        data = response.to_arrow()\n        print(data.df)\n        rich.print(data.metadata)\n        data.save()\n\nawait my_playback()\n</code></pre> <ol> <li>From https://www.flightradar24.com/data/pinned/ua1549-2fb3041#2fb3041.</li> </ol> <pre><code>      timestamp   latitude  longitude  altitude  ground_speed  vertical_speed  track  squawk   ems\n0    1232049993  40.770302 -73.862801         0             0             NaN     59       0  None\n1    1232049997  40.770302 -73.862503         0             0             NaN     65       0  None\n2    1232050001  40.770302 -73.862198         0             0             NaN     71       0  None\n3    1232050005  40.770302 -73.862198         0             0             NaN     76       0  None\n4    1232050009  40.770302 -73.862198         0             0             NaN     82       0  None\n..          ...        ...        ...       ...           ...             ...    ...     ...   ...\n358  1232051425  40.781399 -73.998199       326           137             NaN    223       0  None\n359  1232051429  40.779202 -73.999603       274           131             NaN    226       0  None\n360  1232051433  40.777199 -74.001297       187           134             NaN    222       0  None\n361  1232051437  40.775002 -74.002899       106           130             NaN    223       0  None\n362  1232051441  40.773102 -74.004303        42           128             NaN    223       0  None\n\n[363 rows x 9 columns]\n</code></pre> <pre><code>{\n    'flight_id': 50016321,\n    'callsign': 'AWE1549',\n    'flight_number': 'UA1549',\n    'status_type': 'departure',\n    'status_text': None,\n    'status_diverted': None,\n    'status_time': None,\n    'model_code': 'A320',\n    'icao24': 10493137,\n    'registration': 'N106US',\n    'owner': None,\n    'airline': None,\n    'origin': 'KLGA',\n    'destination': 'KCLT',\n    'median_delay': None,\n    'median_time': None\n}\n</code></pre>"},{"location":"usage/examples/#file-operations","title":"File operations","text":"<p>Saves trajectory data to disk, reads the track and metadata from it.</p> Jupyter cell<code>data_local.df</code><code>data_local.metadata</code> <pre><code>import rich\nfrom fr24.core import FR24\n\nasync def my_playback() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.playback.fetch(0x2FB3041)\n        data = response.to_arrow()\n        data.save()  # (1)!\n        # some time later...\n        data_local = fr24.playback.load(0x2FB3041)  # (2)!\n        print(data_local.df)\n        rich.print(data_local.metadata)\n\nawait my_playback()\n</code></pre> <ol> <li>Saves the parquet to the cache.</li> <li>Load the parquet from the cache.</li> </ol> <pre><code>      timestamp   latitude  longitude  altitude  ground_speed  vertical_speed  track  squawk   ems\n0    1232049993  40.770302 -73.862801         0             0             NaN     59       0  None\n1    1232049997  40.770302 -73.862503         0             0             NaN     65       0  None\n2    1232050001  40.770302 -73.862198         0             0             NaN     71       0  None\n3    1232050005  40.770302 -73.862198         0             0             NaN     76       0  None\n4    1232050009  40.770302 -73.862198         0             0             NaN     82       0  None\n..          ...        ...        ...       ...           ...             ...    ...     ...   ...\n358  1232051425  40.781399 -73.998199       326           137             NaN    223       0  None\n359  1232051429  40.779202 -73.999603       274           131             NaN    226       0  None\n360  1232051433  40.777199 -74.001297       187           134             NaN    222       0  None\n361  1232051437  40.775002 -74.002899       106           130             NaN    223       0  None\n362  1232051441  40.773102 -74.004303        42           128             NaN    223       0  None\n\n[363 rows x 9 columns]\n</code></pre> <pre><code>{\n    'flight_id': 50016321,\n    'callsign': 'AWE1549',\n    'flight_number': 'UA1549',\n    'status_type': 'departure',\n    'status_text': None,\n    'status_diverted': None,\n    'status_time': None,\n    'model_code': 'A320',\n    'icao24': 10493137,\n    'registration': 'N106US',\n    'owner': None,\n    'airline': None,\n    'origin': 'KLGA',\n    'destination': 'KCLT',\n    'median_delay': None,\n    'median_time': None\n}\n</code></pre>"},{"location":"usage/examples/#live-feed","title":"Live Feed","text":"<p>API reference: fr24.core.LiveFeedService, fr24.core.LiveFeedService.fetch</p>"},{"location":"usage/examples/#live","title":"Live","text":"<p>This example is covered in detail in the quickstart.</p> Jupyter cell<code>response</code><code>lf.data.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_feed() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.livefeed.fetch()\n        print(response)\n        datac = response.to_arrow()\n        print(datac.df)\n        datac.save()\n\nawait my_feed()\n</code></pre> <pre><code>LiveFeedAPIResp(\n    ctx={\n        \"timestamp\": 1711911907,\n        \"source\": \"live\",\n        \"duration\": None,\n        \"hfreq\": None,\n        \"base_dir\": PosixPath(\"/home/user/.cache/fr24\"),\n    },\n    data=[\n        {\n            \"timestamp\": 1711911905,\n            \"flightid\": 882151247,\n            \"latitude\": -12.432657241821289,\n            \"longitude\": -172.14825439453125,\n            \"track\": 203,\n            \"altitude\": 34000,\n            \"ground_speed\": 515,\n            \"vertical_speed\": 0,\n            \"on_ground\": False,\n            \"callsign\": \"QFA7552\",\n            \"source\": 0,\n            \"registration\": \"N409MC\",\n            \"origin\": \"HNL\",\n            \"destination\": \"AKL\",\n            \"typecode\": \"B744\",\n            \"eta\": 0,\n            \"squawk\": 0,\n        }\n        # ... 15109 more items\n    ],\n)\n</code></pre> <pre><code>        timestamp   flightid   latitude   longitude  track  altitude  ground_speed  on_ground callsign  source registration origin  destination typecode  eta  vertical_speed  squawk\n0      1711911905  882151247 -12.432657 -172.148254    203     34000           515      False  QFA7552       0       N409MC    HNL          AKL     B744    0               0       0\n1      1711911902  882203620 -16.504490 -178.940308    249     36000           460      False    VOZ76       0       VH-YIL    APW          BNE     B738    0               0       0\n2      1711911904  882212062 -13.240505 -176.195602    292         0             0       True  RLY0100       0       F-OCQZ    WLS                  DHC6    0               0       0\n3      1711911897  882145424  10.347591 -167.007263     56     37000           516      False    QFA15       5       VH-EBQ    BNE          LAX     A332    0               0       0\n4      1711911905  882199081  18.591330 -165.391083    247     32000           416      False   UAL132       3       N77296    HNL          MAJ     B738    0               0       0\n...           ...        ...        ...         ...    ...       ...           ...        ...      ...     ...          ...    ...          ...      ...  ...             ...     ...\n15095  1711911897  882140495  53.746582  174.467392    258     38000           435      False  GTI8650       5       N710GT    LAX          HKG     B77L    0               0       0\n15096  1711911887  882155955  54.291172  175.606842     57     31000           515      False    UPS81       5       N628UP    PVG          ANC     B748    0               0       0\n15097  1711911673  882165589  57.548691  179.460800    246     36000           438      False   KAL258       4       HL8285    ANC          ICN     B77L    0               0       0\n15098  1711911901  882187089  56.527115  176.298798    242     38000           442      False   CKS936       4       N701CK    ANC          HFE     B744    0               0       0\n15099  1711911905  882137160  59.153641  179.730972    229     38000           471      False  KAL8286       5       HL8043    YYZ          ICN     B77L    0               0       0\n\n[15100 rows x 16 columns]\n</code></pre>"},{"location":"usage/examples/#playback_1","title":"Playback","text":"<p>Fetches the live feed three days ago.</p> Jupyter cell<code>lf.data.df</code> <pre><code>from fr24.core import FR24\nimport time\n\nasync def my_feed() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.livefeed.fetch(int(time.time() - 86400 * 3))  # (1)!\n        datac = response.to_arrow()\n        print(datac.df)\n\nawait my_feed()\n</code></pre> <ol> <li>Subtract current UTC by 3 days.</li> </ol> <pre><code>        timestamp   flightid   latitude   longitude  track  altitude ground_speed  on_ground callsign  source registration origin destination typecode  eta  vertical_speed  squawk\n0      1711697713  881642343 -13.628512 -169.556046     44     37000          499      False    DAL42       0       N519DN    SYD         LAX     A359    0               0       0\n1      1711697709  881686001 -14.096649 -172.093018    182      8850          298      False   ANZ999       0       ZK-NNE    APW         AKL     A21N    0               0       0\n2      1711697713  881673319 -46.344315 -173.242355    122     31975          568      False   LAN800       4       CC-BGC    AKL         SCL     B789    0               0       0\n3      1711697713  881679659 -34.398090 -178.388153     64     37975          530      False   ANZ902       4       ZK-NZE    AKL         PPT     B789    0               0       0\n4      1711697717  881655685 -12.116470 -169.877808    199     36000          469      False   HAL465       5       N395HA    HNL         PPG     A332    0               0       0\n...           ...        ...        ...         ...    ...       ...          ...        ...      ...     ...          ...    ...         ...      ...  ...             ...     ...\n11422  1711697721  881662489  56.048801  174.987000    240     36000          468      False  CPA3187       3        B-LJG    ANC         HKG     B748    0               0       0\n11423  1711697713  881602916  56.870163  175.223923    226     35000          476      False   ANA111       3       JA796A    ORD         HND     B77W    0               0       0\n11424  1711697713  881669755  56.652039  176.742554    240     34000          459      False  FDX5236       3       N573FE    ANC         ICN     MD11    0               0       0\n11425  1711697721  881652749  57.509033  179.559845    242     38000          467      False  GTI8065       3       N452PA    PDX         ICN     B744    0               0       0\n11426  1711697717  881648986  54.571342  175.497025     55     31000          501      False   EVA662       5      B-16781    TPE         ANC     B77L    0               0       0\n\n[11427 rows x 16 columns]\n</code></pre>"},{"location":"usage/examples/#lower-level-functions","title":"Lower-level functions","text":""},{"location":"usage/examples/#flight-list_1","title":"Flight list","text":"<p>API Reference: fr24.history.flight_list, fr24.history.flight_list_df</p> Jupyter cell<code>df</code> <pre><code>import httpx\n\nfrom fr24.authentication import login\nfrom fr24.history import flight_list, flight_list_df\n\nimport pandas as pd\n\nasync def my_list() -&gt; pd.DataFrame:\n    async with httpx.AsyncClient() as client:\n        auth = await login(client)\n        if auth is not None:\n            print(auth[\"message\"])\n        list_ = await flight_list(\n            client,\n            flight=\"AF291\",\n            timestamp=\"2024-04-01\",  # (1)!\n            auth=auth,\n        )\n        return list_\n\n\nlist_ = await my_list()\ndf = flight_list_df(list_)\ndf\n</code></pre> <ol> <li>Replace it with the current time.</li> </ol> <pre><code>   flight_id number callsign   icao24 registration typecode origin destination           status                      STOD ETOD                      ATOD                      STOA                      ETOA                      ATOA\n0        NaN  AF291     None      NaN         None      77W   RJBB        LFPG        Scheduled 2024-04-08 02:30:00+00:00  NaT                       NaT 2024-04-08 17:25:00+00:00                       NaT                       NaT\n1        NaN  AF291     None      NaN         None      772   RJBB        LFPG        Scheduled 2024-04-07 02:30:00+00:00  NaT                       NaT 2024-04-07 17:25:00+00:00                       NaT                       NaT\n2        NaN  AF291     None      NaN         None      772   RJBB        LFPG        Scheduled 2024-04-06 02:30:00+00:00  NaT                       NaT 2024-04-06 17:25:00+00:00                       NaT                       NaT\n3        NaN  AF291     None      NaN         None      772   RJBB        LFPG        Scheduled 2024-04-05 02:30:00+00:00  NaT                       NaT 2024-04-05 17:25:00+00:00                       NaT                       NaT\n4        NaN  AF291     None      NaN         None      77W   RJBB        LFPG        Scheduled 2024-04-03 02:30:00+00:00  NaT                       NaT 2024-04-03 17:25:00+00:00                       NaT                       NaT\n5  882273605  AF291   AFR291  3754464       F-GSPA     B772   RJBB        LFPG  Estimated 19:06 2024-04-01 02:30:00+00:00  NaT 2024-04-01 02:56:21+00:00 2024-04-01 17:25:00+00:00 2024-04-01 17:06:08+00:00                       NaT\n6  882083240  AF291   AFR291  3754478       F-GSPO     B772   RJBB        LFPG     Landed 19:15 2024-03-31 02:30:00+00:00  NaT 2024-03-31 02:47:05+00:00 2024-03-31 17:25:00+00:00                       NaT 2024-03-31 17:15:33+00:00\n7  881882655  AF291   AFR291  3754467       F-GSPD     B772   RJBB        LFPG     Landed 18:47 2024-03-30 02:55:00+00:00  NaT 2024-03-30 03:27:31+00:00 2024-03-30 17:50:00+00:00                       NaT 2024-03-30 17:47:52+00:00\n8  881661169  AF291   AFR291  3754470       F-GSPG     B772   RJBB        LFPG     Landed 19:14 2024-03-29 03:25:00+00:00  NaT 2024-03-29 03:41:26+00:00 2024-03-29 18:20:00+00:00                       NaT 2024-03-29 18:14:54+00:00\n9  881224971  AF291   AFR291  3754487       F-GSPX     B772   RJBB        LFPG     Landed 22:22 2024-03-27 03:25:00+00:00  NaT 2024-03-27 06:58:33+00:00 2024-03-27 18:20:00+00:00                       NaT 2024-03-27 21:22:08+00:00\n</code></pre>"},{"location":"usage/examples/#playback_2","title":"Playback","text":"<p>API Reference: fr24.history.playback, fr24.history.playback_df</p> Jupyter cell<code>df</code> <pre><code>import httpx\n\nfrom fr24.authentication import login\nfrom fr24.history import playback, playback_df\n\nimport pandas as pd\n\nasync def my_playback() -&gt; pd.DataFrame:\n    async with httpx.AsyncClient() as client:\n        auth = await login(client)\n        if auth is not None:\n            print(auth[\"message\"])\n        list_ = await playback(\n            client,\n            flight_id=\"35d692b1\",\n            timestamp=1719273600,\n            auth=auth,\n        )\n        return list_\n\n\nlist_ = await my_playback()\ndf = playback_df(list_)\ndf\n</code></pre> <pre><code>                    timestamp   latitude   longitude  altitude  ground_speed  vertical_speed  track  squawk   ems  \n0   2024-06-25 00:34:31+00:00  25.083984  121.251160         0             3               0    137       0  None   \n1   2024-06-25 00:35:17+00:00  25.083664  121.251465         0             9               0    137       0  None   \n2   2024-06-25 00:35:27+00:00  25.083344  121.251770         0             9               0    140       0  None   \n3   2024-06-25 00:35:34+00:00  25.083101  121.251816         0             7               0    163       0  None   \n4   2024-06-25 00:35:47+00:00  25.082882  121.251541         0             5               0    216       0  None   \n..                        ...        ...         ...       ...           ...             ...    ...     ...   ...   \n413 2024-06-25 02:08:13+00:00  22.312042  113.929344         0             5               0     39    1459  None   \n414 2024-06-25 02:08:21+00:00  22.312243  113.929344         0             6               0     14    1459  None   \n415 2024-06-25 02:08:30+00:00  22.312475  113.929214         0             6               0    345    1459  None   \n416 2024-06-25 02:08:39+00:00  22.312706  113.929108         0             5               0    340    1459  None   \n417 2024-06-25 02:08:53+00:00  22.312906  113.929039         0             3               0    340    1459  None   \n\n[418 rows x 9 columns]\n</code></pre>"},{"location":"usage/examples/#airport-arrivals","title":"Airport Arrivals","text":"<p>API Reference: fr24.history.airport_list</p> Jupyter cell<code>df</code> <pre><code>import httpx\n\nfrom fr24.types.fr24 import AirportList\nfrom fr24.history import airport_list\n\nimport pandas as pd\n\nasync def my_arrivals() -&gt; AirportList:\n    async with httpx.AsyncClient() as client:\n        list_ = await airport_list(\n            client,\n            airport=\"tls\",\n            mode=\"arrivals\",\n        )\n        return list_\n\n\nairports = await my_arrivals()\npd.DataFrame(\n    pd.json_normalize(\n        airports[\"result\"][\"response\"][\"airport\"][\"pluginData\"][\"schedule\"][\n            \"arrivals\"\n        ][\"data\"]\n    )\n)\n</code></pre> <pre><code>    flight.identification.id   flight.identification.row   flight.identification.number.default   flight.identification.number.alternative   flight.identification.callsign   flight.identification.codeshare   flight.status.live   flight.status.text   flight.status.icon   flight.status.estimated   ...   flight.time.scheduled.departure   flight.time.scheduled.arrival   flight.time.real.departure   flight.time.real.arrival   flight.time.estimated.departure   flight.time.estimated.arrival   flight.time.other.eta   flight.time.other.duration   flight.aircraft.images   flight.owner  \n0                       None                  5488300922                                 FR8125                                    MAY8125                          RYR8125                              None                False            Scheduled                 None                      None   ...                        1711986600                      1711991100                         None                       None                      1.711987e+09                            None                    None                         None                      NaN            NaN  \n1                       None                  5488216841                                 AF6124                                       None                             None                              None                False            Scheduled                 None                      None   ...                        1711987200                      1711991700                         None                       None                               NaN                            None                    None                         None                      NaN            NaN  \n2                       None                  5488418617                                 U24849                                     EC4849                          EJU51KM                              None                False            Scheduled                 None                      None   ...                        1711987500                      1711992000                         None                       None                      1.711988e+09                            None                    None                         None                      NaN            NaN  \n3                       None                  5488418658                                 U24988                                     EC4988                          EJU82LE                              None                False            Scheduled                 None                      None   ...                        1711986900                      1711992300                         None                       None                      1.711987e+09                            None                    None                         None                      NaN            NaN  \n4                       None                  5488216846                                 AF6126                                       None                             None                              None                False            Scheduled                 None                      None   ...                        1711989000                      1711993500                         None                       None                               NaN                            None                    None                         None                      NaN            NaN  \n5                       None                  5488417705                                 U21311                                     DS1311                          EZS15PY                              None                False            Scheduled                 None                      None   ...                        1711990500                      1711995000                         None                       None                      1.711990e+09                            None                    None                         None                      NaN            NaN  \n6                       None                  5488297888                                 FR1995                                    MAY1995                          RYR1995                              None                False            Scheduled                 None                      None   ...                        1711989600                      1711996500                         None                       None                      1.711990e+09                            None                    None                         None                      NaN            NaN  \n7                       None                  5488418631                                 U24851                                     EC4851                          EJU69EW                              None                False            Scheduled                 None                      None   ...                        1711992000                      1711996500                         None                       None                      1.711992e+09                            None                    None                         None                      NaN            NaN  \n8                       None                  5488298693                                 FR3358                                       None                             None                              None                False            Scheduled                 None                      None   ...                        1711986900                      1711996800                         None                       None                      1.711987e+09                            None                    None                         None                      NaN            NaN  \n9                       None                  5488418589                                 U24729                                     EC4729                          EJU89CR                              None                False            Scheduled                 None                      None   ...                        1711993200                      1711997400                         None                       None                      1.711993e+09                            None                    None                         None                      NaN            NaN  \n\n[10 rows x 75 columns]\n</code></pre>"},{"location":"usage/examples/#airport-search","title":"Airport Search","text":"<p>API Reference: fr24.find</p> Jupyter cell<code>df</code> <pre><code>from fr24.types.find import FindResult\nfrom fr24.find import find\n\nimport pandas as pd\nimport httpx\n\nasync def my_find() -&gt; FindResult:\n    async with httpx.AsyncClient() as client:\n        results = await find(client, \"paris\")\n        assert results is not None\n        return results\n\n\nresults = await my_find()\npd.DataFrame(pd.json_normalize(results[\"results\"]))\n</code></pre> <pre><code>    id                                            label     type   match  detail.lat  detail.lon  detail.size\n0  CDG     Paris Charles de Gaulle Airport (CDG / LFPG)  airport  begins   49.012516    2.555752       199939\n1  ORY                  Paris Orly Airport (ORY / LFPO)  airport  begins   48.723331    2.379444        87577\n2  LBG            Paris Le Bourget Airport (LBG / LFPB)  airport  begins   48.958801    2.433600        27873\n3  BVA        Paris Beauvais-Tille Airport (BVA / LFOB)  airport  begins   49.454189    2.113550        16566\n4  PRX                     Paris Cox Field (PRX / KPRX)  airport  begins   33.636665  -95.450279         1402\n5  XCR         Paris Vatry Chalons Airport (XCR / LFOK)  airport  begins   48.759998    4.200000         1008\n6  VIY  Paris Villacoublay Velizy Air Base (VIY / LFPV)  airport  begins   48.774399    2.201540          993\n7  PHT          Paris Henry County Airport (PHT / KPHT)  airport  begins   36.336384  -88.384270          390\n</code></pre>"},{"location":"usage/examples/#live-feed_1","title":"Live feed","text":"<p>API Reference: fr24.livefeed</p> <p>Demonstrates custom bounding boxes.</p> Jupyter cellProtobuf Output <pre><code>import httpx\nfrom fr24.livefeed import (\n    livefeed_message_create,\n    livefeed_post,\n    livefeed_request_create,\n    livefeed_response_parse,\n)\nfrom fr24.proto.request_pb2 import LiveFeedResponse\n\n\nasync def france_data() -&gt; LiveFeedResponse:\n    async with httpx.AsyncClient() as client:\n        message = livefeed_message_create(north=50, west=-7, south=40, east=10)\n        request = livefeed_request_create(message)\n        data = await livefeed_post(client, request)\n        return livefeed_response_parse(data)\n\n\ndata = await france_data()\ndata\n</code></pre> <pre><code>flights_list {\n  flightid: 882295486\n  latitude: 40.4882507\n  longitude: -6.38517904\n  track: 33\n  altitude: 36000\n  ground_speed: 454\n  icon: 7\n  timestamp: 1711960343\n  callsign: \"BTI4PX\"\n  extra_info {\n    flight: \"BT766\"\n    reg: \"YL-ABL\"\n    route {\n      from_: \"LPA\"\n      to: \"RIX\"\n    }\n    type: \"BCS3\"\n  }\n}\nflights_list {\n  flightid: 882307182\n  latitude: 40.1034851\n  longitude: -4.40472412\n  track: 162\n...\n      to: \"HRG\"\n    }\n    type: \"B738\"\n  }\n}\n</code></pre> <p>In JSON format:</p> Jupyter cellOutput <pre><code>from google.protobuf.json_format import MessageToDict\n\nMessageToDict(data)[\"flightsList\"]\n</code></pre> <pre><code>[{'flightid': 882295486,\n  'latitude': 40.48825,\n  'longitude': -6.385179,\n  'track': 33,\n  'altitude': 36000,\n  'groundSpeed': 454,\n  'icon': 7,\n  'timestamp': 1711960343,\n  'callsign': 'BTI4PX',\n  'extraInfo': {'flight': 'BT766',\n   'reg': 'YL-ABL',\n   'route': {'from': 'LPA', 'to': 'RIX'},\n   'type': 'BCS3'}},\n {'flightid': 882307182,\n  'latitude': 40.103485,\n  'longitude': -4.404724,\n  'track': 162,\n  'altitude': 32950,\n  'groundSpeed': 513,\n  'icon': 10,\n  'timestamp': 1711960344,\n  'callsign': 'EVE1123',\n  'extraInfo': {'flight': 'E91123',\n   'reg': 'EC-LZD',\n   'route': {'from': 'VLL', 'to': 'AGP'},\n...\n  'callsign': 'CXI1015',\n  'extraInfo': {'flight': 'XR1015',\n   'reg': '9H-CXE',\n   'route': {'from': 'CGN', 'to': 'HRG'},\n   'type': 'B738'}}]\n</code></pre>"},{"location":"usage/quickstart/","title":"Library Quickstart","text":""},{"location":"usage/quickstart/#async","title":"Async","text":"<p>Most code is developed using asynchronous programming, enabling parallel execution of multiple queries and achieve high performance.</p> <p>Here is a quick example in case you are not familiar with this code style:</p> Python ScriptJupyter cellOutput <pre><code>import asyncio\nfrom fr24.find import find\nimport httpx\n\nasync def main():  # (1)!\n    async with httpx.AsyncClient() as client:\n        list_ = await find(client, \"Toulouse\")  # (2)!\n        print(list_)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())  # (3)!\n</code></pre> <ol> <li>Wrap your code in an <code>async</code> function</li> <li><code>find()</code> is an asynchronous function - we need to <code>await</code> it</li> <li><code>main()</code> returns a coroutine object which does not run immediately - we need to run it on the event loop</li> </ol> <pre><code>from fr24.find import find\nimport httpx\n\nasync def main(): # (1)!\n    async with httpx.AsyncClient() as client:\n        list_ = await find(client, \"Toulouse\") # (2)!\n        print(list_)\n\nawait main()\n</code></pre> <ol> <li>Wrap your code in an <code>async</code> function</li> <li><code>find()</code> is an asynchronous function - we need to <code>await</code> it</li> </ol> <pre><code>{\n    \"results\": [\n        {\n            \"id\": \"TLS\",\n            \"label\": \"Toulouse Blagnac Airport (TLS / LFBO)\",\n            \"detail\": {\"lat\": 43.628101, \"lon\": 1.367263, \"size\": 33922},\n            \"type\": \"airport\",\n            \"match\": \"begins\",\n        },\n        # ...\n    ]\n}\n</code></pre>"},{"location":"usage/quickstart/#the-fr24-class","title":"The <code>FR24</code> Class","text":"<p>Most of the core code are developed in many tiny functions for flexibility.</p> <p>However, the FR24 class provides a convenient wrapper around them. It:</p> <ul> <li>Manages a shared HTTP client and authentication state</li> <li>Has three services:<ul> <li>Live Feed: snapshot of all aircraft state vectors</li> <li>Flight List: all historical flights for a given aircraft registration or flight number</li> <li>Playback: historical trajectory for one flight.</li> </ul> </li> </ul> <p>Each service has its own async <code>.fetch()</code> method to retrieve raw data from the API. <code>.to_arrow()</code> can then be used to transform to an Apache Arrow table, and used to perform caching and downstream <code>pandas</code> operations.</p> <p>Here is an example for using the Live Feed service:</p>"},{"location":"usage/quickstart/#initialisation","title":"Initialisation","text":"example.py<code>response</code><code>datac.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_feed() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.livefeed.fetch()\n        datac = response.to_arrow()\n        datac.save()\n\nawait my_feed()\n</code></pre> <pre><code>LiveFeedAPIResp(\n    ctx={\n        \"timestamp\": 1711911907,\n        \"source\": \"live\",\n        \"duration\": None,\n        \"hfreq\": None,\n        \"base_dir\": PosixPath(\"/home/user/.cache/fr24\"),\n    },\n    data=[\n        {\n            \"timestamp\": 1711911905,\n            \"flightid\": 882151247,\n            \"latitude\": -12.432657241821289,\n            \"longitude\": -172.14825439453125,\n            \"track\": 203,\n            \"altitude\": 34000,\n            \"ground_speed\": 515,\n            \"vertical_speed\": 0,\n            \"on_ground\": False,\n            \"callsign\": \"QFA7552\",\n            \"source\": 0,\n            \"registration\": \"N409MC\",\n            \"origin\": \"HNL\",\n            \"destination\": \"AKL\",\n            \"typecode\": \"B744\",\n            \"eta\": 0,\n        }\n        # ... 15109 more items\n    ],\n)\n</code></pre> <pre><code>        timestamp   flightid   latitude   longitude  track  altitude  ground_speed  on_ground callsign  source registration origin  destination typecode  eta  vertical_speed\n0      1711911905  882151247 -12.432657 -172.148254    203     34000           515      False  QFA7552       0       N409MC    HNL          AKL     B744    0               0\n1      1711911902  882203620 -16.504490 -178.940308    249     36000           460      False    VOZ76       0       VH-YIL    APW          BNE     B738    0               0\n2      1711911904  882212062 -13.240505 -176.195602    292         0             0       True  RLY0100       0       F-OCQZ    WLS                  DHC6    0               0\n3      1711911897  882145424  10.347591 -167.007263     56     37000           516      False    QFA15       5       VH-EBQ    BNE          LAX     A332    0               0\n4      1711911905  882199081  18.591330 -165.391083    247     32000           416      False   UAL132       3       N77296    HNL          MAJ     B738    0               0\n...           ...        ...        ...         ...    ...       ...           ...        ...      ...     ...          ...    ...          ...      ...  ...             ...\n15095  1711911897  882140495  53.746582  174.467392    258     38000           435      False  GTI8650       5       N710GT    LAX          HKG     B77L    0               0\n15096  1711911887  882155955  54.291172  175.606842     57     31000           515      False    UPS81       5       N628UP    PVG          ANC     B748    0               0\n15097  1711911673  882165589  57.548691  179.460800    246     36000           438      False   KAL258       4       HL8285    ANC          ICN     B77L    0               0\n15098  1711911901  882187089  56.527115  176.298798    242     38000           442      False   CKS936       4       N701CK    ANC          HFE     B744    0               0\n15099  1711911905  882137160  59.153641  179.730972    229     38000           471      False  KAL8286       5       HL8043    YYZ          ICN     B77L    0               0\n\n[15100 rows x 16 columns]\n</code></pre> <p>When <code>FR24()</code> is first initialised, it creates an unauthenticated HTTPX client under the hood.</p> <p>How to authenticate?</p> <pre><code>from fr24.core import FR24\n\nasync with FR24() as fr24:\n    # anonymous now\n    await fr24.login() # reads from environment or configuration file, or,\n    await fr24.login(creds={\"username\": \"...\", \"password\": \"...\"}) # or,\n    await fr24.login(creds={\"subscriptionKey\": \"...\", \"token\": \"...\"})\n</code></pre> <p>See authentication for more details.</p> <p>How to pass in my own HTTPX client?</p> <p>To share clients across code, pass it into the fr24.core.FR24 constructor.</p> <pre><code>import httpx\n\nfrom fr24.core import FR24\n\nclient = httpx.AsyncClient(http2=True, transport=httpx.AsyncHTTPTransport(retries=5))\nasync with FR24(client) as fr24:\n    ...\n</code></pre> <p>The <code>async with</code> statement ensures that it is properly authenticated by calling the login endpoint (if necessary).</p>"},{"location":"usage/quickstart/#fetching-from-api","title":"Fetching from API","text":"Jupyter cell<code>response</code><code>datac.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_feed() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.livefeed.fetch()\n        datac = response.to_arrow()\n        datac.save()\n\nawait my_feed()\n</code></pre> <pre><code>LiveFeedAPIResp(\n    ctx={\n        \"timestamp\": 1711911907,\n        \"source\": \"live\",\n        \"duration\": None,\n        \"hfreq\": None,\n        \"base_dir\": PosixPath(\"/home/user/.cache/fr24\"),\n    },\n    data=[\n        {\n            \"timestamp\": 1711911905,\n            \"flightid\": 882151247,\n            \"latitude\": -12.432657241821289,\n            \"longitude\": -172.14825439453125,\n            \"track\": 203,\n            \"altitude\": 34000,\n            \"ground_speed\": 515,\n            \"vertical_speed\": 0,\n            \"on_ground\": False,\n            \"callsign\": \"QFA7552\",\n            \"source\": 0,\n            \"registration\": \"N409MC\",\n            \"origin\": \"HNL\",\n            \"destination\": \"AKL\",\n            \"typecode\": \"B744\",\n            \"eta\": 0,\n        }\n        # ... 15109 more items\n    ],\n)\n</code></pre> <pre><code>        timestamp   flightid   latitude   longitude  track  altitude  ground_speed  on_ground callsign  source registration origin  destination typecode  eta  vertical_speed\n0      1711911905  882151247 -12.432657 -172.148254    203     34000           515      False  QFA7552       0       N409MC    HNL          AKL     B744    0               0\n1      1711911902  882203620 -16.504490 -178.940308    249     36000           460      False    VOZ76       0       VH-YIL    APW          BNE     B738    0               0\n2      1711911904  882212062 -13.240505 -176.195602    292         0             0       True  RLY0100       0       F-OCQZ    WLS                  DHC6    0               0\n3      1711911897  882145424  10.347591 -167.007263     56     37000           516      False    QFA15       5       VH-EBQ    BNE          LAX     A332    0               0\n4      1711911905  882199081  18.591330 -165.391083    247     32000           416      False   UAL132       3       N77296    HNL          MAJ     B738    0               0\n...           ...        ...        ...         ...    ...       ...           ...        ...      ...     ...          ...    ...          ...      ...  ...             ...\n15095  1711911897  882140495  53.746582  174.467392    258     38000           435      False  GTI8650       5       N710GT    LAX          HKG     B77L    0               0\n15096  1711911887  882155955  54.291172  175.606842     57     31000           515      False    UPS81       5       N628UP    PVG          ANC     B748    0               0\n15097  1711911673  882165589  57.548691  179.460800    246     36000           438      False   KAL258       4       HL8285    ANC          ICN     B77L    0               0\n15098  1711911901  882187089  56.527115  176.298798    242     38000           442      False   CKS936       4       N701CK    ANC          HFE     B744    0               0\n15099  1711911905  882137160  59.153641  179.730972    229     38000           471      False  KAL8286       5       HL8043    YYZ          ICN     B77L    0               0\n\n[15100 rows x 16 columns]\n</code></pre> <p><code>fr24.livefeed</code> returns a LiveFeedService, with the following methods:</p> Method Return type <code>.fetch</code> - asynchronously query the the API for fresh data fr24.core.LiveFeedAPIResp <code>.load</code> - load a previously cached snapshot from the disk fr24.core.LiveFeedArrow <p>You can retrieve:</p> <ul> <li>the context related to the request with <code>response.ctx</code>;</li> <li>the raw JSON response as a list of typed dictionaries with <code>response.data</code>.</li> </ul>"},{"location":"usage/quickstart/#transformation-to-arrow","title":"Transformation to Arrow","text":"<p>In practice, you could directly pipe <code>response.data</code> into <code>pd.DataFrame.from_records()</code>, but pandas uses 64-bit integers by default and can be storage-inefficient.</p> Jupyter cell<code>response</code><code>datac.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_feed() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.livefeed.fetch()\n        datac = response.to_arrow()\n        datac.save()\n\nawait my_feed()\n</code></pre> <pre><code>LiveFeedAPIResp(\n    ctx={\n        \"timestamp\": 1711911907,\n        \"source\": \"live\",\n        \"duration\": None,\n        \"hfreq\": None,\n        \"base_dir\": PosixPath(\"/home/user/.cache/fr24\"),\n    },\n    data=[\n        {\n            \"timestamp\": 1711911905,\n            \"flightid\": 882151247,\n            \"latitude\": -12.432657241821289,\n            \"longitude\": -172.14825439453125,\n            \"track\": 203,\n            \"altitude\": 34000,\n            \"ground_speed\": 515,\n            \"vertical_speed\": 0,\n            \"on_ground\": False,\n            \"callsign\": \"QFA7552\",\n            \"source\": 0,\n            \"registration\": \"N409MC\",\n            \"origin\": \"HNL\",\n            \"destination\": \"AKL\",\n            \"typecode\": \"B744\",\n            \"eta\": 0,\n        }\n        # ... 15109 more items\n    ],\n)\n</code></pre> <pre><code>        timestamp   flightid   latitude   longitude  track  altitude  ground_speed  on_ground callsign  source registration origin  destination typecode  eta  vertical_speed\n0      1711911905  882151247 -12.432657 -172.148254    203     34000           515      False  QFA7552       0       N409MC    HNL          AKL     B744    0               0\n1      1711911902  882203620 -16.504490 -178.940308    249     36000           460      False    VOZ76       0       VH-YIL    APW          BNE     B738    0               0\n2      1711911904  882212062 -13.240505 -176.195602    292         0             0       True  RLY0100       0       F-OCQZ    WLS                  DHC6    0               0\n3      1711911897  882145424  10.347591 -167.007263     56     37000           516      False    QFA15       5       VH-EBQ    BNE          LAX     A332    0               0\n4      1711911905  882199081  18.591330 -165.391083    247     32000           416      False   UAL132       3       N77296    HNL          MAJ     B738    0               0\n...           ...        ...        ...         ...    ...       ...           ...        ...      ...     ...          ...    ...          ...      ...  ...             ...\n15095  1711911897  882140495  53.746582  174.467392    258     38000           435      False  GTI8650       5       N710GT    LAX          HKG     B77L    0               0\n15096  1711911887  882155955  54.291172  175.606842     57     31000           515      False    UPS81       5       N628UP    PVG          ANC     B748    0               0\n15097  1711911673  882165589  57.548691  179.460800    246     36000           438      False   KAL258       4       HL8285    ANC          ICN     B77L    0               0\n15098  1711911901  882187089  56.527115  176.298798    242     38000           442      False   CKS936       4       N701CK    ANC          HFE     B744    0               0\n15099  1711911905  882137160  59.153641  179.730972    229     38000           471      False  KAL8286       5       HL8043    YYZ          ICN     B77L    0               0\n\n[15100 rows x 16 columns]\n</code></pre> <p>Instead, you can call <code>.to_arrow()</code>, which creates a new strongly typed Apache Arrow table from it.</p> <p>Arrow is a columnar data storage format with excellent interoperability with <code>pd.DataFrame</code>. You can retrieve:</p> <ul> <li>the context related to the request with <code>datac.ctx</code>;</li> <li>the underlying Arrow table with <code>datac.data</code>;</li> <li>get the pandas representation with <code>datac.df</code>.</li> </ul>"},{"location":"usage/quickstart/#saving-to-disk","title":"Saving to Disk","text":"Jupyter cell<code>response</code><code>datac.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_feed() -&gt; None:\n    async with FR24() as fr24:\n        response = await fr24.livefeed.fetch()\n        datac = response.to_arrow()\n        datac.save()\n\nawait my_feed()\n</code></pre> <pre><code>LiveFeedAPIResp(\n    ctx={\n        \"timestamp\": 1711911907,\n        \"source\": \"live\",\n        \"duration\": None,\n        \"hfreq\": None,\n        \"base_dir\": PosixPath(\"/home/user/.cache/fr24\"),\n    },\n    data=[\n        {\n            \"timestamp\": 1711911905,\n            \"flightid\": 882151247,\n            \"latitude\": -12.432657241821289,\n            \"longitude\": -172.14825439453125,\n            \"track\": 203,\n            \"altitude\": 34000,\n            \"ground_speed\": 515,\n            \"vertical_speed\": 0,\n            \"on_ground\": False,\n            \"callsign\": \"QFA7552\",\n            \"source\": 0,\n            \"registration\": \"N409MC\",\n            \"origin\": \"HNL\",\n            \"destination\": \"AKL\",\n            \"typecode\": \"B744\",\n            \"eta\": 0,\n        }\n        # ... 15109 more items\n    ],\n)\n</code></pre> <pre><code>        timestamp   flightid   latitude   longitude  track  altitude  ground_speed  on_ground callsign  source registration origin  destination typecode  eta  vertical_speed\n0      1711911905  882151247 -12.432657 -172.148254    203     34000           515      False  QFA7552       0       N409MC    HNL          AKL     B744    0               0\n1      1711911902  882203620 -16.504490 -178.940308    249     36000           460      False    VOZ76       0       VH-YIL    APW          BNE     B738    0               0\n2      1711911904  882212062 -13.240505 -176.195602    292         0             0       True  RLY0100       0       F-OCQZ    WLS                  DHC6    0               0\n3      1711911897  882145424  10.347591 -167.007263     56     37000           516      False    QFA15       5       VH-EBQ    BNE          LAX     A332    0               0\n4      1711911905  882199081  18.591330 -165.391083    247     32000           416      False   UAL132       3       N77296    HNL          MAJ     B738    0               0\n...           ...        ...        ...         ...    ...       ...           ...        ...      ...     ...          ...    ...          ...      ...  ...             ...\n15095  1711911897  882140495  53.746582  174.467392    258     38000           435      False  GTI8650       5       N710GT    LAX          HKG     B77L    0               0\n15096  1711911887  882155955  54.291172  175.606842     57     31000           515      False    UPS81       5       N628UP    PVG          ANC     B748    0               0\n15097  1711911673  882165589  57.548691  179.460800    246     36000           438      False   KAL258       4       HL8285    ANC          ICN     B77L    0               0\n15098  1711911901  882187089  56.527115  176.298798    242     38000           442      False   CKS936       4       N701CK    ANC          HFE     B744    0               0\n15099  1711911905  882137160  59.153641  179.730972    229     38000           471      False  KAL8286       5       HL8043    YYZ          ICN     B77L    0               0\n\n[15100 rows x 16 columns]\n</code></pre> <p><code>.save()</code> writes the table to the default cache directory<sup>1</sup> using the Parquet data format.</p> <p>You can always check its exact location using <code>datac.fp</code>. In general, where it gets saved is as follows:</p>"},{"location":"usage/quickstart/#storage-location","title":"Storage Location","text":"<ul> <li>Live feed<ul> <li><code>feed/{timestamp}.parquet</code></li> </ul> </li> <li>Flight list<ul> <li><code>flight_list/reg/{reg.upper()}.parquet</code>, or</li> <li><code>flight_list/flight/{iata_flight_num.upper()}.parquet</code></li> </ul> </li> <li>Playback<ul> <li><code>playback/{fr24_hex_id.lower()}.parquet</code></li> </ul> </li> </ul> <p>It should resemble the following on Linux: <pre><code>$ tree $HOME/.cache/fr24/feed\n/home/user/.cache/fr24\n\u251c\u2500\u2500 feed\n\u2502   \u251c\u2500\u2500 1711911907.parquet\n\u251c\u2500\u2500 flight_list\n\u2502   \u251c\u2500\u2500 flight\n\u2502   \u2502   \u2514\u2500\u2500 CX8747.parquet\n\u2502   \u2514\u2500\u2500 reg\n\u2502       \u2514\u2500\u2500 B-HUJ.parquet\n\u2514\u2500\u2500 playback\n    \u2514\u2500\u2500 2d81a27.parquet\n</code></pre> These directories are created automatically whenever <code>datac.save()</code> is called.</p>"},{"location":"usage/quickstart/#reading-from-disk","title":"Reading from disk","text":"Jupyter cell<code>datac.df</code> <pre><code>from fr24.core import FR24\n\nasync def my_feed() -&gt; None:\n    async with FR24() as fr24:\n        datac = fr24.livefeed.load(1711911907)\n\nawait my_feed()\n</code></pre> <pre><code>        timestamp   flightid   latitude   longitude  track  altitude  ground_speed  on_ground callsign  source registration origin  destination typecode  eta  vertical_speed\n0      1711911905  882151247 -12.432657 -172.148254    203     34000           515      False  QFA7552       0       N409MC    HNL          AKL     B744    0               0\n1      1711911902  882203620 -16.504490 -178.940308    249     36000           460      False    VOZ76       0       VH-YIL    APW          BNE     B738    0               0\n2      1711911904  882212062 -13.240505 -176.195602    292         0             0       True  RLY0100       0       F-OCQZ    WLS                  DHC6    0               0\n3      1711911897  882145424  10.347591 -167.007263     56     37000           516      False    QFA15       5       VH-EBQ    BNE          LAX     A332    0               0\n4      1711911905  882199081  18.591330 -165.391083    247     32000           416      False   UAL132       3       N77296    HNL          MAJ     B738    0               0\n...           ...        ...        ...         ...    ...       ...           ...        ...      ...     ...          ...    ...          ...      ...  ...             ...\n15095  1711911897  882140495  53.746582  174.467392    258     38000           435      False  GTI8650       5       N710GT    LAX          HKG     B77L    0               0\n15096  1711911887  882155955  54.291172  175.606842     57     31000           515      False    UPS81       5       N628UP    PVG          ANC     B748    0               0\n15097  1711911673  882165589  57.548691  179.460800    246     36000           438      False   KAL258       4       HL8285    ANC          ICN     B77L    0               0\n15098  1711911901  882187089  56.527115  176.298798    242     38000           442      False   CKS936       4       N701CK    ANC          HFE     B744    0               0\n15099  1711911905  882137160  59.153641  179.730972    229     38000           471      False  KAL8286       5       HL8043    YYZ          ICN     B77L    0               0\n\n[15100 rows x 16 columns]\n</code></pre> <p>To retrieve saved data, first pass in the unique identifier (timestamp in this case) to the <code>.load()</code>.</p>"},{"location":"usage/quickstart/#notes","title":"Notes","text":"<p>Each service inherits from the fr24.base.ServiceBase and have similar APIs demonstrated above.</p> <p>See the examples gallery to learn more.</p> <p>Tip</p> <p>Pyarrow unfortunately do not provide type hints. You can however, generate the stubs to your <code>site-packages</code> directory with: <pre><code>$ stubgen -p pyarrow -o $(python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\")\n</code></pre></p> <p>Intersphinx for this project could be found here.</p> <ol> <li> <p>You can check its location by running <code>fr24 dirs</code> in the shell.\u00a0\u21a9</p> </li> </ol>"}]}